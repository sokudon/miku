--orig https://obsproject.com/forum/resources/date-and-time.644/
-- 令和テキトー表示とUTCグローバル時間を出せるよう改造

--出力例
--サマータイム有り＋時差情報 先頭に!をつけるとUTC時間になる
--%Y/%m/%d(%Vw)%X(UTC%z%DST)

--全部出し
--%UTC
--%c%DST
--%x%X%z
--%s
--%ISO
--%ISOZ
--%VR%m月%d日(%Vw)%H時%M分%S秒

--複数のタイムゾーン
--%JST
--UTC+?? %UTC
--UTC協定時間%ISOZ
--ISO8601 %ISO

--AC音ゲーの情報を出す
--%i
--%J%is
--%K%it
--%E%ie


--個別誕生日
--%in
--%ib%ic
--%ia%il

--独自拡張2020/04/17現在 
--%EM	AC音ゲーお誕生日何日以内のやつ
--%E	デバッグ文字1 サービス終了日
--%J	デバッグ文字2 サービス開始日
--%K	デバッグ文字3 今年の周年日
--%i	AC音ゲーゲームの名前,フリーズ防止
--%is	AC音ゲーの記念日の時間からの経過時間
--%it	AC音ゲーの記念日までの時間
--%ie	AC音ゲーのサービス終了した時間からの経過時間(データがないものは表示なし)

--%in	AC音ゲー個別
--%ib	AC音ゲー個別誕生日
--%ic	AC音ゲー個別誕生日までの時間
--%ia	AC音ゲー今年の誕生日
--%il	AC音ゲー今年の誕生日までの時間

--%UTC  worldtime set UTCsetting,	UTC標準時からUI設定の時間を表示,サマータイムは非対応
--%JST  ISO8601表示日本時間
--%ISO  ISO8601表示ローカル時間
--%ISOZ ISO8601表示UTC時間
--%Z	サマーなしタイムゾーン時差情報,元はタイムゾーンストリングだが文字化けで使えないので（）
--%ZZ   timezone,HH:mm  timezoneサマーなしタイムゾーン時差情報  
--%zz   サマータイム有り＋時差情報 HH:mm
--%DST  夏時間かどうか出力する 引数"J"で夏時間
--%s    unixtime,フリーズ防止
--%VR--%Vr--%VH--%Vh--%VS--%Vs--%VT--%Vt 日本の和暦、開始年しかちぇくしてないのでてきとー


--OBSlua標準出力
--画像でまとめてみた　https://imgur.com/a/MYtwxg1

--http://noriko3.blog42.fc2.com/blog-entry-128.html?sp
--%% the character `%´ %の文字だけをだしたいとき 
--%a ロケールの省略形の曜日名 (Sun..Sat) 
--%A ロケールの完全表記の曜日名、可変長 (Sunday..Saturday) 
--%b ロケールの省略形の月名 (Jan..Dec) 
--%B ロケールの完全表記の月名、可変長 (January..December) 
--%c ロケールの日付と時刻 (Sat Nov 4 12:02:33 EST
--%d 月内通算日数 (01..31) 
--%D 日付 (mm/dd/yy) 
--%H hour, using a 24-hour clock (23) [00-23] 時間 
--%h %b と同じ 
--%I hour, using a 12-hour clock (11) [01-12] 時間ampm %pとセット 
--%j 年内通算日数 (001..366) 
--%k 時 (0..23) 
--%l 時 (1..12) 
--%M minute (48) [00-59] 分 
--%m month (09) [01-12] 月 
--%n 改行 
--%p AM あるいは PM のロケール 
--%r 時刻、12 時間 (hh:mm:ss [AP]M) 
--%S second (10) [00-61] 秒 
--%s 1970-01-01 0:00:00 UTC からの秒数 (標準外の拡張) 
--%T 時刻、24 時間 (hh:mm:ss) 
--%t 水平タブ 
--%U 日曜日を週の最初の日とした年内通算週 (00..53) 
--%V 週番号 
--%w weekday (3) [0-6 = Sunday-Saturday] 曜日の番号 
--%w 週のうちの曜日 (0..6) (0 が日曜日) 
--%W 月曜日を週の最初の日とした年内通算週 (00..53) 
--%x date (e.g., 09/16/98) 年月日 
--%X time (e.g., 23:48:10) 時分秒 
--%X ロケールによる時刻の表現 (%H:%M:%S) 
--%x ロケールの日付表現 (mm/dd/yy) 
--%Y full year (1998) 年 
--%y two-digit year (98) [00-99] ２桁の年 
--%y 年の最後の 2 つの数字 (00..99) 
--%Y 年 (1970...) 
--%Z タイムゾーン (例 EDT)、あるいはタイムゾーンが決定できないならば無し 
--%z timezone,osdateのサマータイム有り 

--クラッシュ使用不可か別の文字処理に使う
--%E　デバッグ文字1
--%J　デバッグ文字2
--%K　デバッグ文字3
--%L
--%N
--%O
--%P
--%Q
--%f
--%i AC音ゲーの時間
--%k 
--%l
--%o
--%q
--%s　　unixtimeに使用
--%v

--%%A:%A%n%%B:%B%n%%C:%C%n%%D:%D%n%%E:%E%n%%F:%F%n%%G:%G%n
--%%H:%H%n%%I:%I%n%%J:%J%n%%K:%K%n%%L:%L%n%%M:%M%n%%N:%N%n
--%%O:%O%n%%P:%P%n%%Q:%Q%n%%R:%R%n%%S:%S%n%%T:%T%n%%U:%U%n
--%%V:%V%n%%W:%W%n%%X:%X%n%%Y:%Y%n%%Z:%Z%n%%n:%n
--
--%%a:%a%n%%b:%b%n%%c:%c%n%%d:%d%n%%e:%e%n%%f:%f%n%%g:%g%n
--%%h:%h%n%%i:%i%n%%j:%j%n%%k:%k%n%%l:%l%n%%m:%m 
--%%o:%o%n%%p:%p%n%%q:%q%n%%r:%r%n%%s:%s%n%%t:%t%n%%u:%u
--%%v:%v%n%%w:%w%n%%x:%x%n%%y:%y%n%%z:%z

--hour	15 os.date("*t").hash　os.dateがもつ構造体
--min	21 
--wday	1
--day	28
--month	6
--year	2009
--sec	48
--yday	179






obs           = obslua
source_name   = ""

last_text     = ""
format_string = ""
activated     = false
utc           = 0
ima           = 0
imass         = 0
useidol		  = 1
mln        	  = 1
cgn           = 1
smn        	  = 1
scn           = 1
dsn           = 1
daylim 		  =7
daystring     =""
debugtxt1	  = ""
debugtxt2	  = ""
debugtxt3	  = ""
daychange     = ""


--kacてきとーｄｂ
imashead ={"ゲーム名","稼働","国備考","終わり"}
imas = {{"初音ミク -Project DIVA-","2009-07-02T00:00:00+09:00","PSP",""},{"初音ミク ボカロ×ライブ!","2010-05-20T00:00:00+09:00","Mobage",""},{"初音ミク Project DIVA Arcade","2010-06-23T00:00:00+09:00","AC",""},{"初音ミク -Project DIVA- ドリーミーシアター","2010-06-24T00:00:00+09:00","PS3",""},{"初音ミク -Project DIVA- 2nd","2010-07-29T00:00:00+09:00","PSP",""},{"初音ミク ボカロ×ライブ!","2010-08-10T00:00:00+09:00","GREE",""},{"初音ミク Project DIVA Arcade Version A","2011-01-27T00:00:00+09:00","AC",""},{"初音ミク -Project DIVA- ドリーミーシアター2nd","2011-08-04T00:00:00+09:00","PS3",""},{"初音ミク -Project DIVA- extend","2011-11-10T00:00:00+09:00","PSP",""},{"初音ミク ぐらふぃコレクション","2012-02-20T00:00:00+09:00","Mobage",""},{"初音ミク Project mirai","2012-03-08T00:00:00+09:00","3DS",""},{"ミクフリック","2012-03-09T00:00:00+09:00","ios",""},{"ミクフリック／02","2012-08-10T00:00:00+09:00","ios","2017-09-29T00:00:00+09:00"},{"初音ミク -Project DIVA- f","2012-08-30T00:00:00+09:00","VITA",""},{"初音ミク -Project DIVA- ドリーミーシアターextend","2012-09-13T00:00:00+09:00","PS3",""},{"初音ミク Project DIVA Arcade Version B","2012-10-04T00:00:00+09:00","AC",""},{"初音ミク ライブステージ プロデューサー","2012-11-08T00:00:00+09:00","android","2015-01-27T15:00:00+09:00"},{"初音ミク ライブステージ プロデューサー","2012-12-06T00:00:00+09:00","ios","2015-01-27T15:00:00+09:00"},{"初音ミク -Project DIVA- F","2013-03-07T00:00:00+09:00","VITA",""},{"初音ミク ぐらふぃコレクション","2013-03-11T00:00:00+09:00","mixi",""},{"Megpoid the Music #","2013-03-28T00:00:00+09:00","PSP",""},{"Miku Miku Hockey","2013-09-10T00:00:00+09:00","VITA",""},{"初音ミク Project DIVA Arcade Future Tone","2013-11-21T00:00:00+09:00","AC",""},{"初音ミク Project mirai 2","2013-11-28T00:00:00+09:00","3DS",""},{"Miku Miku Hockey 2.0が","2014-02-13T00:00:00+09:00","VITA",""},{"初音ミク -Project DIVA- F 2nd","2014-03-27T00:00:00+09:00","VITA",""},{"初音ミクぐらふぃコレクション なぞの音楽すい星","2014-10-28T00:00:00+09:00","android/ios","2020-06-30T14:00:00+09:00"},{"初音ミク Project DIVA Arcade Future Tone Version A REVISION1","2014-11-05T00:00:00+09:00","AC",""},{"初音ミク Project mirai でらっくす","2015-05-28T00:00:00+09:00","3DS",""},{"IA/VT -COLORFUL-","2015-07-30T00:00:00+09:00","VITA",""},{"初音ミク Project DIVA Arcade Future Tone Version B","2016-02-17T00:00:00+09:00","AC",""},{"初音ミク -Project DIVA- X","2016-03-24T00:00:00+09:00","VITA",""},{"初音ミク Project DIVA Future Tone Prelude／Future Sound／Colorful Tone","2016-06-23T00:00:00+09:00","PS4",""},{"初音ミク Project DIVA Arcade Future Tone Version B REVISION1","2016-08-24T00:00:00+09:00","AC",""},{"初音ミク -Project DIVA- X HD","2016-08-25T00:00:00+09:00","PS4",""},{"初音ミク VRフューチャーライブ　1st Stage","2016-10-13T00:00:00+09:00","PS4",""},{"初音ミク Project DIVA Arcade Future Tone Version B REVISION2","2016-10-20T00:00:00+09:00","AC",""},{"初音ミク VRフューチャーライブ　2nd Stage","2016-11-10T00:00:00+09:00","PS4",""},{"初音ミク Project DIVA Arcade Future Tone Version B REVISION3","2016-12-14T00:00:00+09:00","AC",""},{"初音ミク VRフューチャーライブ　3rd Stage","2016-12-15T00:00:00+09:00","PS4",""},{"初音ミク Project DIVA Future Tone DX","2017-11-22T00:00:00+09:00","PS4",""},{"初音ミク VR","2018-03-09T00:00:00+09:00","steam",""},{"初音ミク VR","2019-12-05T00:00:00+09:00","PSVR",""},{"初音ミク -Project DIVA MEGA39's","2020-02-13T00:00:00+09:00","switch",""},{"初音ミク -TAP WONDER-","2020-06-25T00:00:00+09:00","android/ios","2024-01-25T15:00:00+09:00"},{"プロジェクトセカイ カラフルステージ！ feat. 初音ミク","2020-09-30T00:00:00+09:00","android/ios",""},{"初音ミク みんなで大富豪","2021-06-24T00:00:00+09:00","android/ios",""},{"Project SEKAI COLORFUL STAGE! feat. Hatsune Miku ","2021-12-08T00:00:00+09:00","android/ios",""},{"世界計畫繽紛舞台！ feat.初音未來","2021-12-08T00:00:00+09:00","android/ios",""},{"初音ミク いっしょに！ジグソーパズル","2022-03-24T00:00:00+09:00","switch",""},{"프로젝트 세카이 컬러풀 스테이지！ feat. 하츠네 미쿠","2022-05-20T00:00:00+09:00","android/ios",""},{"初音ミク Project DIVA MEGA39's+","2022-05-27T00:00:00+09:00","steam",""},{"初音ミク いっしょに！ジグソーパズル","2022-06-24T00:00:00+09:00","xbox/PC",""},{"ピアプロキャラクターズ×たまごっち","2023-03-17T00:00:00+09:00","たまごっち",""},{"Fit Boxing feat. 初音ミク -ミクといっしょにエクササイズ-","2024-03-07T00:00:00+09:00","switch",""},{"初音ミク 不思議なホシと願いのかけら","2023-06-08T00:00:00+09:00","switch",""},{"初音ミク 不思議なホシと願いのかけら","2024-04-22T00:00:00+09:00","Steam,Xbox",""},{"日野森志歩","2020-01-08T00:00:00+09:00","",""},{"朝比奈まふゆ","2020-01-27T00:00:00+09:00","",""},{"巡音ルカ","2020-01-30T00:00:00+09:00","",""},{"宵崎奏","2020-02-10T00:00:00+09:00","",""},{"KAITO","2020-02-17T00:00:00+09:00","",""},{"小豆沢こはね","2020-03-02T00:00:00+09:00","",""},{"桃井愛莉","2020-03-19T00:00:00+09:00","",""},{"花里みのり","2020-04-14T00:00:00+09:00","",""},{"東雲絵名","2020-04-30T00:00:00+09:00","",""},{"天馬咲希","2020-05-09T00:00:00+09:00","",""},{"天馬司","2020-05-17T00:00:00+09:00","",""},{"青柳冬弥","2020-05-25T00:00:00+09:00","",""},{"神代類","2020-06-24T00:00:00+09:00","",""},{"草薙寧々","2020-07-20T00:00:00+09:00","",""},{"白石杏","2020-07-26T00:00:00+09:00","",""},{"星乃一歌","2020-08-11T00:00:00+09:00","",""},{"暁山瑞希","2020-08-27T00:00:00+09:00","",""},{"初音ミク","2020-08-31T00:00:00+09:00","",""},{"鳳えむ","2020-09-09T00:00:00+09:00","",""},{"桐谷遥","2020-10-05T00:00:00+09:00","",""},{"望月穂波","2020-10-27T00:00:00+09:00","",""},{"MEIKO","2020-11-05T00:00:00+09:00","",""},{"東雲彰人","2020-11-12T00:00:00+09:00","",""},{"日野森雫","2020-12-06T00:00:00+09:00","",""},{"鏡音レン","2020-12-27T00:00:00+09:00","",""},{"鏡音リン","2020-12-27T00:00:00+09:00","",""},{"LEON","2004-01-15T00:00:00+09:00","",""},{"LOLA","2004-01-15T00:00:00+09:00","",""},{"MIRIAM","2004-07-01T00:00:00+09:00","",""},{"MEIKO","2004-11-05T00:00:00+09:00","",""},{"KAITO","2006-02-17T00:00:00+09:00","",""},{"AquesTalk1","2006-05-25T00:00:00+09:00","",""},{"SweetAnn","2007-06-29T00:00:00+09:00","",""},{"初音ミク","2007-08-31T00:00:00+09:00","",""},{"はちゅねミク","2007-09-04T00:00:00+09:00","",""},{"雑音ミク","2007-10-17T00:00:00+09:00","",""},{"ざちゅねミク","2007-10-20T00:00:00+09:00","",""},{"初音ミクオ","2007-10-27T00:00:00+09:00","",""},{"終音ニク","2007-10-30T00:00:00+09:00","",""},{"亞北ネル","2007-11-01T00:00:00+09:00","",""},{"つくねミク","2007-11-04T00:00:00+09:00","",""},{"かぐぁみねリン","2007-11-08T00:00:00+09:00","",""},{"あちたねりゅ","2007-11-14T00:00:00+09:00","",""},{"和音ミク","2007-11-16T00:00:00+09:00","",""},{"弱音ハク","2007-11-21T00:00:00+09:00","",""},{"亞北ネロ","2007-11-22T00:00:00+09:00","",""},{"鈴音フク","2007-11-30T00:00:00+09:00","",""},{"鈴音リン","2007-12-02T00:00:00+09:00","",""},{"隣音サイ","2007-12-14T00:00:00+09:00","",""},{"MEITO","2007-12-16T00:00:00+09:00","",""},{"耗夜メテ","2007-12-22T00:00:00+09:00","",""},{"ミクカル様","2007-12-23T00:00:00+09:00","",""},{"闇音アク","2007-12-24T00:00:00+09:00","",""},{"ブラック★ロックシューター","2007-12-26T00:00:00+09:00","",""},{"阿久女イク","2007-12-27T00:00:00+09:00","",""},{"鏡音リン","2007-12-27T00:00:00+09:00","",""},{"鏡音レン","2007-12-27T00:00:00+09:00","",""},{"鏡音ロン","2007-12-28T00:00:00+09:00","",""},{"PRIMA","2008-01-14T00:00:00+09:00","",""},{"鋼音ミク","2008-01-18T00:00:00+09:00","",""},{"華音ミル","2008-01-19T00:00:00+09:00","",""},{"迷子","2008-01-21T00:00:00+09:00","",""},{"ギロカクたん","2008-02-02T00:00:00+09:00","",""},{"子守音レム","2008-02-06T00:00:00+09:00","",""},{"AKAITO","2008-02-12T00:00:00+09:00","",""},{"乙音ペケ","2008-02-15T00:00:00+09:00","",""},{"呪音キク","2008-02-15T00:00:00+09:00","",""},{"焼音ニク","2008-02-17T00:00:00+09:00","",""},{"帯人","2008-03-14T00:00:00+09:00","",""},{"KIKAITO","2008-03-16T00:00:00+09:00","",""},{"外れミク","2008-03-24T00:00:00+09:00","",""},{"初音三久","2008-03-24T00:00:00+09:00","",""},{"鏡音リント","2008-03-28T00:00:00+09:00","",""},{"重音テト","2008-04-01T00:00:00+09:00","",""},{"亞乃音ムリ","2008-04-05T00:00:00+09:00","",""},{"ニガイト","2008-04-09T00:00:00+09:00","",""},{"機械人（キカイト）","2008-04-10T00:00:00+09:00","",""},{"咲音メイコ","2008-04-11T00:00:00+09:00","",""},{"本音デル","2008-05-23T00:00:00+09:00","",""},{"太目ニク","2008-06-21T00:00:00+09:00","",""},{"鏡音リンact2","2008-07-18T00:00:00+09:00","",""},{"鏡音レンact2","2008-07-18T00:00:00+09:00","",""},{"風見音セン","2008-07-20T00:00:00+09:00","",""},{"風見音レツ","2008-07-20T00:00:00+09:00","",""},{"がくっぽいど","2008-07-31T00:00:00+09:00","",""},{"神威がくぽ","2008-07-31T00:00:00+09:00","",""},{"しゃきねめ～こ","2008-08-08T00:00:00+09:00","",""},{"欲音ルコ","2008-11-17T00:00:00+09:00","",""},{"たこルカ","2009-01-08T00:00:00+09:00","",""},{"ルカントさん","2009-01-09T00:00:00+09:00","",""},{"巡音ルカ","2009-01-30T00:00:00+09:00","",""},{"骸音シーエ","2009-03-15T00:00:00+09:00","",""},{"VOCALOID2 Megpoid","2009-06-26T00:00:00+09:00","",""},{"SONIKA","2009-07-15T00:00:00+09:00","",""},{"鏡音レンカ","2009-08-06T00:00:00+09:00","",""},{"CV-4Cβ","2009-10-06T00:00:00+09:00","",""},{"波音リツ","2009-10-12T00:00:00+09:00","",""},{"雪女ミク","2009-10-24T00:00:00+09:00","",""},{"miki（SF-A2 開発コードmiki）","2009-12-04T00:00:00+09:00","",""},{"SF-A2 開発コード miki","2009-12-04T00:00:00+09:00","",""},{"歌愛ユキ","2009-12-04T00:00:00+09:00","",""},{"氷山キヨテル","2009-12-04T00:00:00+09:00","",""},{"リンの幼虫","2009-12-17T00:00:00+09:00","",""},{"BIG-AL","2009-12-22T00:00:00+09:00","",""},{"AquesTalk2","2010-01-27T00:00:00+09:00","",""},{"シテヤンヨ","2010-02-02T00:00:00+09:00","",""},{"初音ミクAppend","2010-04-30T00:00:00+09:00","",""},{"健音テイ","2010-06-19T00:00:00+09:00","",""},{"TONIO","2010-07-13T00:00:00+09:00","",""},{"ハニーリリー","2010-07-29T00:00:00+09:00","",""},{"Lily","2010-08-25T00:00:00+09:00","",""},{"VY1","2010-09-01T00:00:00+09:00","",""},{"VY1iV","2010-10-05T00:00:00+09:00","",""},{"リュウト","2010-10-08T00:00:00+09:00","",""},{"怨音リナ","2010-10-08T00:00:00+09:00","",""},{"猫村いろは","2010-10-22T00:00:00+09:00","",""},{"まるくなるミク","2010-11-06T00:00:00+09:00","",""},{"歌手音ピコ","2010-12-08T00:00:00+09:00","",""},{"鏡音リンAppend","2010-12-27T00:00:00+09:00","",""},{"鏡音レンAppend","2010-12-27T00:00:00+09:00","",""},{"刹音セレ","2011-02-14T00:00:00+09:00","",""},{"しゅしゅミク","2011-03-08T00:00:00+09:00","",""},{"VY2","2011-04-25T00:00:00+09:00","",""},{"おどおどハク","2011-05-01T00:00:00+09:00","",""},{"つんつんネル","2011-05-01T00:00:00+09:00","",""},{"植木ロイド","2011-07-24T00:00:00+09:00","",""},{"SeeU","2011-08-30T00:00:00+09:00","",""},{"VY2iV","2011-09-01T00:00:00+09:00","",""},{"あきこロイドちゃん","2011-09-06T00:00:00+09:00","",""},{"ミクダヨー","2011-09-17T00:00:00+09:00","",""},{"とてとてテト","2011-10-12T00:00:00+09:00","",""},{"Mew","2011-10-21T00:00:00+09:00","",""},{"VOCALOID3 Megpoid（Power、Adult、Sweet、Whisper）","2011-10-21T00:00:00+09:00","",""},{"VY1V3","2011-10-21T00:00:00+09:00","",""},{"下火セツ","2011-12-06T00:00:00+09:00","",""},{"兎眠りおん","2011-12-16T00:00:00+09:00","",""},{"OLIVER","2011-12-21T00:00:00+09:00","",""},{"CUL","2011-12-22T00:00:00+09:00","",""},{"結月ゆかり（結月縁）","2011-12-22T00:00:00+09:00","",""},{"Bruno","2011-12-23T00:00:00+09:00","",""},{"Clara","2011-12-23T00:00:00+09:00","",""},{"IA -ARIA ON THE PLANETES","2012-01-27T00:00:00+09:00","",""},{"鏡音ノリン","2012-02-12T00:00:00+09:00","",""},{"VOCALOID3 Megpoid（ Native）","2012-03-16T00:00:00+09:00","",""},{"蒼姫ラピス","2012-04-06T00:00:00+09:00","",""},{"VOCALOID3 Lily","2012-04-19T00:00:00+09:00","",""},{"MAYU","2012-05-06T00:00:00+09:00","",""},{"まるくなるネル","2012-06-03T00:00:00+09:00","",""},{"洛天依","2012-07-12T00:00:00+09:00","",""},{"VOCALOID3 がくっぽいど","2012-07-13T00:00:00+09:00","",""},{"galaco","2012-08-05T00:00:00+09:00","",""},{"ミクナノー","2012-08-29T00:00:00+09:00","",""},{"VY2V3","2012-10-19T00:00:00+09:00","",""},{"iVラピス","2012-11-26T00:00:00+09:00","",""},{"Avanna","2012-12-22T00:00:00+09:00","",""},{"KAITO V3","2013-02-15T00:00:00+09:00","",""},{"VOCALOID3 Megpoid（English）","2013-02-28T00:00:00+09:00","",""},{"SHION/UTAU","2013-04-05T00:00:00+09:00","",""},{"KYO","2013-06-21T00:00:00+09:00","",""},{"WIL","2013-06-21T00:00:00+09:00","",""},{"YUU","2013-06-21T00:00:00+09:00","",""},{"言和","2013-07-11T00:00:00+09:00","",""},{"初音ミクV3（English）","2013-08-31T00:00:00+09:00","",""},{"YOHIOloid","2013-09-10T00:00:00+09:00","",""},{"CeVIO Creative Studio","2013-09-26T00:00:00+09:00","",""},{"初音ミクV3 バンドル（Original、Sweet、Dark、Soft、Solid、English）","2013-09-26T00:00:00+09:00","",""},{"初音ミクV3（Original、Sweet、Dark、Soft、Solid）","2013-09-26T00:00:00+09:00","",""},{"CeVIO Creative Studio　すずきつづみ","2013-09-26T00:00:00+09:00","",""},{"MAIKA","2013-12-18T00:00:00+09:00","",""},{"メルリ","2013-12-24T00:00:00+09:00","",""},{"Megpoid Talk","2014-01-16T00:00:00+09:00","",""},{"マクネナナ","2014-01-31T00:00:00+09:00","",""},{"MEIKO V3","2014-02-04T00:00:00+09:00","",""},{"kokone（心響）","2014-02-14T00:00:00+09:00","",""},{"杏音","2014-03-03T00:00:00+09:00","",""},{"鳥音","2014-03-03T00:00:00+09:00","",""},{"iVメルリ","2014-03-26T00:00:00+09:00","",""},{"flower","2014-05-09T00:00:00+09:00","",""},{"東北ずん子","2014-06-05T00:00:00+09:00","",""},{"IA ROCKS -ARIA ON THE PLANETES-","2014-06-27T00:00:00+09:00","",""},{"galaco NEO","2014-08-01T00:00:00+09:00","",""},{"Rana","2014-09-09T00:00:00+09:00","",""},{"VOCALOID3 ガチャッポイド","2014-09-17T00:00:00+09:00","",""},{"Chika","2014-10-16T00:00:00+09:00","",""},{"CeVIO さとうささらソングボイス","2014-11-20T00:00:00+09:00","",""},{"Hide","2014-12-10T00:00:00+09:00","",""},{"VY1V4","2014-12-18T00:00:00+09:00","",""},{"CYBER DIVA","2015-02-04T00:00:00+09:00","",""},{"心華","2015-02-10T00:00:00+09:00","",""},{"V4結月ゆかり コンプリート","2015-03-18T00:00:00+09:00","",""},{"V4結月ゆかり 穏","2015-03-18T00:00:00+09:00","",""},{"V4結月ゆかり 純","2015-03-18T00:00:00+09:00","",""},{"V4結月ゆかり 凛","2015-03-18T00:00:00+09:00","",""},{"巡音ルカV4X","2015-03-19T00:00:00+09:00","",""},{"がくっぽいどV4","2015-04-30T00:00:00+09:00","",""},{"開発コードmikiV4","2015-06-18T00:00:00+09:00","",""},{"猫村いろはV4","2015-06-18T00:00:00+09:00","",""},{"アルスロイド","2015-06-24T00:00:00+09:00","",""},{"V4 Flower","2015-07-12T00:00:00+09:00","",""},{"楽正綾","2015-07-17T00:00:00+09:00","",""},{"Sachiko","2015-07-27T00:00:00+09:00","",""},{"アルスロイド(製品版）","2015-09-20T00:00:00+09:00","",""},{"Ruby","2015-10-07T00:00:00+09:00","",""},{"歌愛ユキV4","2015-10-29T00:00:00+09:00","",""},{"氷山キヨテルV4","2015-10-29T00:00:00+09:00","",""},{"メグッポイドV4","2015-11-05T00:00:00+09:00","",""},{"DAINA","2015-11-21T00:00:00+09:00","",""},{"DEX","2015-11-21T00:00:00+09:00","",""},{"Rana V4","2015-12-01T00:00:00+09:00","",""},{"VOCALOID SDK for Unity","2015-12-21T00:00:00+09:00","",""},{"鏡音レンV4X","2015-12-24T00:00:00+09:00","",""},{"unity-chan!","2016-01-14T00:00:00+09:00","",""},{"Fukase","2016-01-28T00:00:00+09:00","",""},{"星塵","2016-02-20T00:00:00+09:00","",""},{"音街ウナ（sugar、spicy）","2016-07-30T00:00:00+09:00","",""},{"初音ミク V4 ENGLISH","2016-08-31T00:00:00+09:00","",""},{"初音ミク V4X バンドル","2016-08-31T00:00:00+09:00","",""},{"初音ミク V4X（ORIGINAL、SWEET、DARK、SOFT、SOLID）","2016-08-31T00:00:00+09:00","",""},{"東北ずん子 V4 ナチュラル","2016-10-26T00:00:00+09:00","",""},{"Cyber Songman","2016-10-31T00:00:00+09:00","",""},{"マクネナナ プチ","2016-12-15T00:00:00+09:00","",""},{"マクネナナV4 English","2016-12-15T00:00:00+09:00","",""},{"マクネナナV4 ナチュラル","2016-12-15T00:00:00+09:00","",""},{"UNI","2017-02-14T00:00:00+09:00","",""},{"兎眠りおんV4","2017-02-16T00:00:00+09:00","",""},{"夢眠ネム","2017-02-16T00:00:00+09:00","",""},{"楽正龍牙","2017-05-10T00:00:00+09:00","",""},{"UTAUずんだもん","2017-05-22T00:00:00+09:00","",""},{"UTAU沖縄あわも","2017-06-01T00:00:00+09:00","",""},{"正岡小豆","2017-06-11T00:00:00+09:00","",""},{"AZUKI","2017-07-12T00:00:00+09:00","",""},{"MATCHA","2017-07-12T00:00:00+09:00","",""},{"LUMi","2017-08-30T00:00:00+09:00","",""},{"初音ミク V4 CHINESE","2017-08-31T00:00:00+09:00","",""},{"小林抹茶","2017-09-13T00:00:00+09:00","",""},{"心華V4","2017-09-22T00:00:00+09:00","",""},{"AquesTalk10","2017-10-10T00:00:00+09:00","",""},{"紲星あかり","2018-04-26T00:00:00+09:00","",""},{"洛天依(日本語版)","2018-05-21T00:00:00+09:00","",""},{"ミライ小町","2018-05-24T00:00:00+09:00","",""},{"VOCALOID5/PREMIUM","2018-07-12T00:00:00+09:00","",""},{"桜乃そら ナチュラル/クール","2018-07-26T00:00:00+09:00","",""},{"徵羽摩柯/墨清弦","2018-08-02T00:00:00+09:00","",""},{"SynthesizerV AI 弦巻マキ","2021-06-18T00:00:00+09:00","",""},{"音楽的同位体 可不","2021-07-07T00:00:00+09:00","",""},{"VOICEVOXずんだもん","2021-08-01T00:00:00+09:00","",""},{"CeVIO AI さとうささらソングボイス","2021-08-05T00:00:00+09:00","",""},{"CeVIO AI さとうささらトークボイス","2021-08-05T00:00:00+09:00","",""},{"音楽的同位体 星界","2022-04-29T00:00:00+09:00","",""},{"NEUTRINOずんだもん","2022-08-01T00:00:00+09:00","",""},{"AquesTalkPlayer","2022-08-13T00:00:00+09:00","",""},{"VoiSona さとうささら 日本語ソングボイスライブラリ","2022-09-05T00:00:00+09:00","",""},{"AI Megpoid","2022-10-13T00:00:00+09:00","",""},{"HARUKA","2022-10-13T00:00:00+09:00","",""},{"AKITO","2022-10-13T00:00:00+09:00","",""},{"ALLEN","2022-10-13T00:00:00+09:00","",""},{"SARAH","2022-10-13T00:00:00+09:00","",""},{"音楽的同位体 裏命(RIME)        ","2022-10-25T00:00:00+09:00","",""},{"Seiren Voice ずんだもん","2022-11-29T00:00:00+09:00","",""},{"夢ノ結唱 BanG Dream! AI Singing Synthesizer POPY\t","2022-12-21T00:00:00+09:00","",""},{"夢ノ結唱 BanG Dream! AI Singing","2022-12-21T00:00:00+09:00","",""},{" Synthesizer ROSE\tSynthesizer V AI 夢ノ結唱 ROSE","2022-12-21T00:00:00+09:00","",""},{"音楽的同位体 狐子（COKO）","2023-01-25T00:00:00+09:00","",""},{"VOCALOID5「洛天依 V5」「言和 V5」「楽正綾 V5」","2023-02-13T00:00:00+09:00","",""},{"#kzn","2023-02-26T00:00:00+09:00","",""},{"Po-uta","2023-03-07T00:00:00+09:00","",""},{"VoiSona","2023-04-21T00:00:00+09:00","",""},{"符色  ","2023-05-09T00:00:00+09:00","",""},{"VOCALOID6「ZOLA PROJECT」","2023-06-20T00:00:00+09:00","",""},{"VOCALOID6「AI 音街ウナ」","2023-06-22T00:00:00+09:00","",""},{"MYK-IV","2023-07-13T00:00:00+09:00","",""},{"VoiSona Talk さとうささら日本語トークボイスライブラリ","2023-09-01T00:00:00+09:00","",""},{"VX-β ボイスバンク（花奏かのんβ、杏戸ゆげβ、Ciちゃんβ、春日部つむぎβ）","2023-09-23T00:00:00+09:00","",""},{"AiSuu","2023-12-14T00:00:00+09:00","",""},{"SynthesizerV AI Megpoid","2023-12-20T00:00:00+09:00","",""},{"Synthesizer V AI 夢ノ結唱 POPY","2023-12-21T00:00:00+09:00","",""},{"ASAHI","2023-12-24T00:00:00+09:00","",""},{"SAKURA","2023-12-24T00:00:00+09:00","",""},{"TAKU","2023-12-24T00:00:00+09:00","",""},{"SHION/VOCALOID","2023-12-24T00:00:00+09:00","",""},{"音楽的同位体 狐子 TALK EXTENSION collaboration with VOICEPEAK","2024-01-25T00:00:00+09:00","",""},{"VOCALOID6「花響琴」","2024-04-18T00:00:00+09:00","",""},{"VOCALOID6「式狼縁」","2024-04-24T00:00:00+09:00","",""},{"CeVIO AI ユニちゃん","2024-04-26T00:00:00+09:00","",""},{"VOCALOID6「AI Megpoid SOLID」","2024-07-04T00:00:00+09:00","",""},{"VOCALOID6「ゲキヤクV」カゼヒキV」","2024-07-18T00:00:00+09:00","",""},{"VOCALOID6「galaco BLACK」「galaco WHITE」","2024-08-05T00:00:00+09:00","",""},{"VOCALOID6「ついなちゃん」","2024-09-30T00:00:00+09:00","",""},{"VOCALOID6「ボカロのCiちゃん」","2024-10-09T00:00:00+09:00","",""},{"VOCALOID6「花奏」","2024-11-27T00:00:00+09:00","",""},{"ミクオの日","2020-06-07T00:00:00+09:00","",""},{"ミクの日","2020-03-09T00:00:00+09:00","",""},{"GUMIの日","2020-09-03T00:00:00+09:00","",""},{"亞北ネルの日","2020-09-03T00:00:00+09:00","",""},{"ハクさんの日","2020-08-09T00:00:00+09:00","",""},{"ずんだもん誕生日","2020-12-05T00:00:00+09:00","",""},{"さとうささら誕生日","2020-01-22T00:00:00+09:00","",""},{"沖縄あわも誕生日","2020-11-01T00:00:00+09:00","",""},{"すずきつづみ誕生日","2020-02-23T00:00:00+09:00","",""}}
imasb='{"cg":[["2009-07-02T00:00:00+09:00","初音ミク  Project DIVA ","初音ミク  Project DIVA "],["2010-05-20T00:00:00+09:00","初音ミク ボカロ×ライブ!","初音ミク ボカロ×ライブ!"],["2010-06-23T00:00:00+09:00","初音ミク Project DIVA Arcade","初音ミク Project DIVA Arcade"],["2010-06-24T00:00:00+09:00","初音ミク  Project DIVA  ドリーミーシアター","初音ミク  Project DIVA  ドリーミーシアター"],["2010-07-29T00:00:00+09:00","初音ミク  Project DIVA  2nd","初音ミク  Project DIVA  2nd"],["2010-08-10T00:00:00+09:00","初音ミク ボカロ×ライブ!","初音ミク ボカロ×ライブ!"],["2011-01-27T00:00:00+09:00","初音ミク Project DIVA Arcade Version A","初音ミク Project DIVA Arcade Version A"],["2011-08-04T00:00:00+09:00","初音ミク  Project DIVA  ドリーミーシアター2nd","初音ミク  Project DIVA  ドリーミーシアター2nd"],["2011-11-10T00:00:00+09:00","初音ミク  Project DIVA  extend","初音ミク  Project DIVA  extend"],["2012-02-20T00:00:00+09:00","初音ミク ぐらふぃコレクション","初音ミク ぐらふぃコレクション"],["2012-03-08T00:00:00+09:00","初音ミク Project mirai","初音ミク Project mirai"],["2012-03-09T00:00:00+09:00","ミクフリック","ミクフリック"],["2012-08-10T00:00:00+09:00","ミクフリック／02","ミクフリック／02"],["2012-08-30T00:00:00+09:00","初音ミク  Project DIVA  f","初音ミク  Project DIVA  f"],["2012-09-13T00:00:00+09:00","初音ミク  Project DIVA  ドリーミーシアターextend","初音ミク  Project DIVA  ドリーミーシアターextend"],["2012-10-04T00:00:00+09:00","初音ミク Project DIVA Arcade Version B","初音ミク Project DIVA Arcade Version B"],["2012-11-08T00:00:00+09:00","初音ミク ライブステージ プロデューサー","初音ミク ライブステージ プロデューサー"],["2012-12-06T00:00:00+09:00","初音ミク ライブステージ プロデューサー","初音ミク ライブステージ プロデューサー"],["2013-03-07T00:00:00+09:00","初音ミク  Project DIVA  F","初音ミク  Project DIVA  F"],["2013-03-11T00:00:00+09:00","初音ミク ぐらふぃコレクション","初音ミク ぐらふぃコレクション"],["2013-03-28T00:00:00+09:00","Megpoid the Music #","Megpoid the Music #"],["2013-09-10T00:00:00+09:00","Miku Miku Hockey","Miku Miku Hockey"],["2013-11-21T00:00:00+09:00","初音ミク Project DIVA Arcade Future Tone","初音ミク Project DIVA Arcade Future Tone"],["2013-11-28T00:00:00+09:00","初音ミク Project mirai 2","初音ミク Project mirai 2"],["2014-02-13T00:00:00+09:00","Miku Miku Hockey 2.0が","Miku Miku Hockey 2.0が"],["2014-03-27T00:00:00+09:00","初音ミク  Project DIVA  F 2nd","初音ミク  Project DIVA  F 2nd"],["2014-10-28T00:00:00+09:00","初音ミクぐらふぃコレクション なぞの音楽すい星","初音ミクぐらふぃコレクション なぞの音楽すい星"],["2014-11-05T00:00:00+09:00","初音ミク Project DIVA Arcade Future Tone Version A REVISION1","初音ミク Project DIVA Arcade Future Tone Version A REVISION1"],["2015-05-28T00:00:00+09:00","初音ミク Project mirai でらっくす","初音ミク Project mirai でらっくす"],["2015-07-30T00:00:00+09:00","IA/VT  COLORFUL ","IA/VT  COLORFUL "],["2016-02-17T00:00:00+09:00","初音ミク Project DIVA Arcade Future Tone Version B","初音ミク Project DIVA Arcade Future Tone Version B"],["2016-03-24T00:00:00+09:00","初音ミク  Project DIVA  X","初音ミク  Project DIVA  X"],["2016-06-23T00:00:00+09:00","初音ミク Project DIVA Future Tone Prelude／Future Sound／Colorful Tone","初音ミク Project DIVA Future Tone Prelude／Future Sound／Colorful Tone"],["2016-08-24T00:00:00+09:00","初音ミク Project DIVA Arcade Future Tone Version B REVISION1","初音ミク Project DIVA Arcade Future Tone Version B REVISION1"],["2016-08-25T00:00:00+09:00","初音ミク  Project DIVA  X HD","初音ミク  Project DIVA  X HD"],["2016-10-13T00:00:00+09:00","初音ミク VRフューチャーライブ　1st Stage","初音ミク VRフューチャーライブ　1st Stage"],["2016-10-20T00:00:00+09:00","初音ミク Project DIVA Arcade Future Tone Version B REVISION2","初音ミク Project DIVA Arcade Future Tone Version B REVISION2"],["2016-11-10T00:00:00+09:00","初音ミク VRフューチャーライブ　2nd Stage","初音ミク VRフューチャーライブ　2nd Stage"],["2016-12-14T00:00:00+09:00","初音ミク Project DIVA Arcade Future Tone Version B REVISION3","初音ミク Project DIVA Arcade Future Tone Version B REVISION3"],["2016-12-15T00:00:00+09:00","初音ミク VRフューチャーライブ　3rd Stage","初音ミク VRフューチャーライブ　3rd Stage"],["2017-11-22T00:00:00+09:00","初音ミク Project DIVA Future Tone DX","初音ミク Project DIVA Future Tone DX"],["2018-03-09T00:00:00+09:00","初音ミク VR","初音ミク VR"],["2019-12-05T00:00:00+09:00","初音ミク VR","初音ミク VR"],["2020-02-13T00:00:00+09:00","初音ミク  Project DIVA MEGA39’s","初音ミク  Project DIVA MEGA39’s"],["2020-06-25T00:00:00+09:00","初音ミク  TAP WONDER ","初音ミク  TAP WONDER "],["2020-09-30T00:00:00+09:00","プロジェクトセカイ カラフルステージ！ feat. 初音ミク","プロジェクトセカイ カラフルステージ！ feat. 初音ミク"],["2021-06-24T00:00:00+09:00","初音ミク みんなで大富豪","初音ミク みんなで大富豪"],["2021-12-08T00:00:00+09:00","Project SEKAI COLORFUL STAGE! feat. Hatsune Miku ","Project SEKAI COLORFUL STAGE! feat. Hatsune Miku "],["2021-12-08T00:00:00+09:00","世界計畫繽紛舞台！ feat.初音未來","世界計畫繽紛舞台！ feat.初音未來"],["2022-03-24T00:00:00+09:00","初音ミク いっしょに！ジグソーパズル","初音ミク いっしょに！ジグソーパズル"],["2022-05-20T00:00:00+09:00","프로젝트 세카이 컬러풀 스테이지！ feat. 하츠네 미쿠","프로젝트 세카이 컬러풀 스테이지！ feat. 하츠네 미쿠"],["2022-05-27T00:00:00+09:00","初音ミク Project DIVA MEGA39’s+","初音ミク Project DIVA MEGA39’s+"],["2022-06-24T00:00:00+09:00","初音ミク いっしょに！ジグソーパズル","初音ミク いっしょに！ジグソーパズル"],["2023-03-17T00:00:00+09:00","ピアプロキャラクターズ×たまごっち","ピアプロキャラクターズ×たまごっち"],["2024-03-07T00:00:00+09:00","Fit Boxing feat. 初音ミク  ミクといっしょにエクササイズ ","Fit Boxing feat. 初音ミク  ミクといっしょにエクササイズ "],["2023-06-08T00:00:00+09:00","初音ミク 不思議なホシと願いのかけら","初音ミク 不思議なホシと願いのかけら"],["2024-04-22T00:00:00+09:00","初音ミク 不思議なホシと願いのかけら","初音ミク 不思議なホシと願いのかけら"]],"ml":[["2020-01-08T00:00:00+09:00","日野森志歩","日野森志歩"],["2020-01-27T00:00:00+09:00","朝比奈まふゆ","朝比奈まふゆ"],["2020-01-30T00:00:00+09:00","巡音ルカ","巡音ルカ"],["2020-02-10T00:00:00+09:00","宵崎奏","宵崎奏"],["2020-02-17T00:00:00+09:00","KAITO","KAITO"],["2020-03-02T00:00:00+09:00","小豆沢こはね","小豆沢こはね"],["2020-03-19T00:00:00+09:00","桃井愛莉","桃井愛莉"],["2020-04-14T00:00:00+09:00","花里みのり","花里みのり"],["2020-04-30T00:00:00+09:00","東雲絵名","東雲絵名"],["2020-05-09T00:00:00+09:00","天馬咲希","天馬咲希"],["2020-05-17T00:00:00+09:00","天馬司","天馬司"],["2020-05-25T00:00:00+09:00","青柳冬弥","青柳冬弥"],["2020-06-24T00:00:00+09:00","神代類","神代類"],["2020-07-20T00:00:00+09:00","草薙寧々","草薙寧々"],["2020-07-26T00:00:00+09:00","白石杏","白石杏"],["2020-08-11T00:00:00+09:00","星乃一歌","星乃一歌"],["2020-08-27T00:00:00+09:00","暁山瑞希","暁山瑞希"],["2020-08-31T00:00:00+09:00","初音ミク","初音ミク"],["2020-09-09T00:00:00+09:00","鳳えむ","鳳えむ"],["2020-10-05T00:00:00+09:00","桐谷遥","桐谷遥"],["2020-10-27T00:00:00+09:00","望月穂波","望月穂波"],["2020-11-05T00:00:00+09:00","MEIKO","MEIKO"],["2020-11-12T00:00:00+09:00","東雲彰人","東雲彰人"],["2020-12-06T00:00:00+09:00","日野森雫","日野森雫"],["2020-12-27T00:00:00+09:00","鏡音レン","鏡音レン"],["2020-12-27T00:00:00+09:00","鏡音リン","鏡音リン"]],"sm":[["2004-01-15T00:00:00+09:00","LEON","LEON"],["2004-01-15T00:00:00+09:00","LOLA","LOLA"],["2004-07-01T00:00:00+09:00","MIRIAM","MIRIAM"],["2004-11-05T00:00:00+09:00","MEIKO","MEIKO"],["2006-02-17T00:00:00+09:00","KAITO","KAITO"],["2006-05-25T00:00:00+09:00","AquesTalk1","AquesTalk1"],["2007-06-29T00:00:00+09:00","SweetAnn","SweetAnn"],["2007-08-31T00:00:00+09:00","初音ミク","初音ミク"],["2007-09-04T00:00:00+09:00","はちゅねミク","はちゅねミク"],["2007-10-17T00:00:00+09:00","雑音ミク","雑音ミク"],["2007-10-20T00:00:00+09:00","ざちゅねミク","ざちゅねミク"],["2007-10-27T00:00:00+09:00","初音ミクオ","初音ミクオ"],["2007-10-30T00:00:00+09:00","終音ニク","終音ニク"],["2007-11-01T00:00:00+09:00","亞北ネル","亞北ネル"],["2007-11-04T00:00:00+09:00","つくねミク","つくねミク"],["2007-11-08T00:00:00+09:00","かぐぁみねリン","かぐぁみねリン"],["2007-11-14T00:00:00+09:00","あちたねりゅ","あちたねりゅ"],["2007-11-16T00:00:00+09:00","和音ミク","和音ミク"],["2007-11-21T00:00:00+09:00","弱音ハク","弱音ハク"],["2007-11-22T00:00:00+09:00","亞北ネロ","亞北ネロ"],["2007-11-30T00:00:00+09:00","鈴音フク","鈴音フク"],["2007-12-02T00:00:00+09:00","鈴音リン","鈴音リン"],["2007-12-14T00:00:00+09:00","隣音サイ","隣音サイ"],["2007-12-16T00:00:00+09:00","MEITO","MEITO"],["2007-12-22T00:00:00+09:00","耗夜メテ","耗夜メテ"],["2007-12-23T00:00:00+09:00","ミクカル様","ミクカル様"],["2007-12-24T00:00:00+09:00","闇音アク","闇音アク"],["2007-12-26T00:00:00+09:00","ブラック★ロックシューター","ブラック★ロックシューター"],["2007-12-27T00:00:00+09:00","阿久女イク","阿久女イク"],["2007-12-27T00:00:00+09:00","鏡音リン","鏡音リン"],["2007-12-27T00:00:00+09:00","鏡音レン","鏡音レン"],["2007-12-28T00:00:00+09:00","鏡音ロン","鏡音ロン"],["2008-01-14T00:00:00+09:00","PRIMA","PRIMA"],["2008-01-18T00:00:00+09:00","鋼音ミク","鋼音ミク"],["2008-01-19T00:00:00+09:00","華音ミル","華音ミル"],["2008-01-21T00:00:00+09:00","迷子","迷子"],["2008-02-02T00:00:00+09:00","ギロカクたん","ギロカクたん"],["2008-02-06T00:00:00+09:00","子守音レム","子守音レム"],["2008-02-12T00:00:00+09:00","AKAITO","AKAITO"],["2008-02-15T00:00:00+09:00","乙音ペケ","乙音ペケ"],["2008-02-15T00:00:00+09:00","呪音キク","呪音キク"],["2008-02-17T00:00:00+09:00","焼音ニク","焼音ニク"],["2008-03-14T00:00:00+09:00","帯人","帯人"],["2008-03-16T00:00:00+09:00","KIKAITO","KIKAITO"],["2008-03-24T00:00:00+09:00","外れミク","外れミク"],["2008-03-24T00:00:00+09:00","初音三久","初音三久"],["2008-03-28T00:00:00+09:00","鏡音リント","鏡音リント"],["2008-04-01T00:00:00+09:00","重音テト","重音テト"],["2008-04-05T00:00:00+09:00","亞乃音ムリ","亞乃音ムリ"],["2008-04-09T00:00:00+09:00","ニガイト","ニガイト"],["2008-04-10T00:00:00+09:00","機械人（キカイト）","機械人（キカイト）"],["2008-04-11T00:00:00+09:00","咲音メイコ","咲音メイコ"],["2008-05-23T00:00:00+09:00","本音デル","本音デル"],["2008-06-21T00:00:00+09:00","太目ニク","太目ニク"],["2008-07-18T00:00:00+09:00","鏡音リンact2","鏡音リンact2"],["2008-07-18T00:00:00+09:00","鏡音レンact2","鏡音レンact2"],["2008-07-20T00:00:00+09:00","風見音セン","風見音セン"],["2008-07-20T00:00:00+09:00","風見音レツ","風見音レツ"],["2008-07-31T00:00:00+09:00","がくっぽいど","がくっぽいど"],["2008-07-31T00:00:00+09:00","神威がくぽ","神威がくぽ"],["2008-08-08T00:00:00+09:00","しゃきねめ～こ","しゃきねめ～こ"],["2008-11-17T00:00:00+09:00","欲音ルコ","欲音ルコ"],["2009-01-08T00:00:00+09:00","たこルカ","たこルカ"],["2009-01-09T00:00:00+09:00","ルカントさん","ルカントさん"],["2009-01-30T00:00:00+09:00","巡音ルカ","巡音ルカ"],["2009-03-15T00:00:00+09:00","骸音シーエ","骸音シーエ"],["2009-06-26T00:00:00+09:00","VOCALOID2 Megpoid","VOCALOID2 Megpoid"],["2009-07-15T00:00:00+09:00","SONIKA","SONIKA"],["2009-08-06T00:00:00+09:00","鏡音レンカ","鏡音レンカ"],["2009-10-06T00:00:00+09:00","CV 4Cβ","CV 4Cβ"],["2009-10-12T00:00:00+09:00","波音リツ","波音リツ"],["2009-10-24T00:00:00+09:00","雪女ミク","雪女ミク"],["2009-12-04T00:00:00+09:00","miki（SF A2 開発コードmiki）","miki（SF A2 開発コードmiki）"],["2009-12-04T00:00:00+09:00","SF A2 開発コード miki","SF A2 開発コード miki"],["2009-12-04T00:00:00+09:00","歌愛ユキ","歌愛ユキ"],["2009-12-04T00:00:00+09:00","氷山キヨテル","氷山キヨテル"],["2009-12-17T00:00:00+09:00","リンの幼虫","リンの幼虫"],["2009-12-22T00:00:00+09:00","BIG AL","BIG AL"],["2010-01-27T00:00:00+09:00","AquesTalk2","AquesTalk2"],["2010-02-02T00:00:00+09:00","シテヤンヨ","シテヤンヨ"],["2010-04-30T00:00:00+09:00","初音ミクAppend","初音ミクAppend"],["2010-06-19T00:00:00+09:00","健音テイ","健音テイ"],["2010-07-13T00:00:00+09:00","TONIO","TONIO"],["2010-07-29T00:00:00+09:00","ハニーリリー","ハニーリリー"],["2010-08-25T00:00:00+09:00","Lily","Lily"],["2010-09-01T00:00:00+09:00","VY1","VY1"],["2010-10-05T00:00:00+09:00","VY1iV","VY1iV"],["2010-10-08T00:00:00+09:00","リュウト","リュウト"],["2010-10-08T00:00:00+09:00","怨音リナ","怨音リナ"],["2010-10-22T00:00:00+09:00","猫村いろは","猫村いろは"],["2010-11-06T00:00:00+09:00","まるくなるミク","まるくなるミク"],["2010-12-08T00:00:00+09:00","歌手音ピコ","歌手音ピコ"],["2010-12-27T00:00:00+09:00","鏡音リンAppend","鏡音リンAppend"],["2010-12-27T00:00:00+09:00","鏡音レンAppend","鏡音レンAppend"],["2011-02-14T00:00:00+09:00","刹音セレ","刹音セレ"],["2011-03-08T00:00:00+09:00","しゅしゅミク","しゅしゅミク"],["2011-04-25T00:00:00+09:00","VY2","VY2"],["2011-05-01T00:00:00+09:00","おどおどハク","おどおどハク"],["2011-05-01T00:00:00+09:00","つんつんネル","つんつんネル"],["2011-07-24T00:00:00+09:00","植木ロイド","植木ロイド"],["2011-08-30T00:00:00+09:00","SeeU","SeeU"],["2011-09-01T00:00:00+09:00","VY2iV","VY2iV"],["2011-09-06T00:00:00+09:00","あきこロイドちゃん","あきこロイドちゃん"],["2011-09-17T00:00:00+09:00","ミクダヨー","ミクダヨー"],["2011-10-12T00:00:00+09:00","とてとてテト","とてとてテト"],["2011-10-21T00:00:00+09:00","Mew","Mew"],["2011-10-21T00:00:00+09:00","VOCALOID3 Megpoid（Power、Adult、Sweet、Whisper）","VOCALOID3 Megpoid（Power、Adult、Sweet、Whisper）"],["2011-10-21T00:00:00+09:00","VY1V3","VY1V3"],["2011-12-06T00:00:00+09:00","下火セツ","下火セツ"],["2011-12-16T00:00:00+09:00","兎眠りおん","兎眠りおん"],["2011-12-21T00:00:00+09:00","OLIVER","OLIVER"],["2011-12-22T00:00:00+09:00","CUL","CUL"],["2011-12-22T00:00:00+09:00","結月ゆかり（結月縁）","結月ゆかり（結月縁）"],["2011-12-23T00:00:00+09:00","Bruno","Bruno"],["2011-12-23T00:00:00+09:00","Clara","Clara"],["2012-01-27T00:00:00+09:00","IA  ARIA ON THE PLANETES","IA  ARIA ON THE PLANETES"],["2012-02-12T00:00:00+09:00","鏡音ノリン","鏡音ノリン"],["2012-03-16T00:00:00+09:00","VOCALOID3 Megpoid（ Native）","VOCALOID3 Megpoid（ Native）"],["2012-04-06T00:00:00+09:00","蒼姫ラピス","蒼姫ラピス"],["2012-04-19T00:00:00+09:00","VOCALOID3 Lily","VOCALOID3 Lily"],["2012-05-06T00:00:00+09:00","MAYU","MAYU"],["2012-06-03T00:00:00+09:00","まるくなるネル","まるくなるネル"],["2012-07-12T00:00:00+09:00","洛天依","洛天依"],["2012-07-13T00:00:00+09:00","VOCALOID3 がくっぽいど","VOCALOID3 がくっぽいど"],["2012-08-05T00:00:00+09:00","galaco","galaco"],["2012-08-29T00:00:00+09:00","ミクナノー","ミクナノー"],["2012-10-19T00:00:00+09:00","VY2V3","VY2V3"],["2012-11-26T00:00:00+09:00","iVラピス","iVラピス"],["2012-12-22T00:00:00+09:00","Avanna","Avanna"],["2013-02-15T00:00:00+09:00","KAITO V3","KAITO V3"],["2013-02-28T00:00:00+09:00","VOCALOID3 Megpoid（English）","VOCALOID3 Megpoid（English）"],["2013-04-05T00:00:00+09:00","SHION/UTAU","SHION/UTAU"],["2013-06-21T00:00:00+09:00","KYO","KYO"],["2013-06-21T00:00:00+09:00","WIL","WIL"],["2013-06-21T00:00:00+09:00","YUU","YUU"],["2013-07-11T00:00:00+09:00","言和","言和"],["2013-08-31T00:00:00+09:00","初音ミクV3（English）","初音ミクV3（English）"],["2013-09-10T00:00:00+09:00","YOHIOloid","YOHIOloid"],["2013-09-26T00:00:00+09:00","CeVIO Creative Studio","CeVIO Creative Studio"],["2013-09-26T00:00:00+09:00","初音ミクV3 バンドル（Original、Sweet、Dark、Soft、Solid、English）","初音ミクV3 バンドル（Original、Sweet、Dark、Soft、Solid、English）"],["2013-09-26T00:00:00+09:00","初音ミクV3（Original、Sweet、Dark、Soft、Solid）","初音ミクV3（Original、Sweet、Dark、Soft、Solid）"],["2013-09-26T00:00:00+09:00","CeVIO Creative Studio　すずきつづみ","CeVIO Creative Studio　すずきつづみ"],["2013-12-18T00:00:00+09:00","MAIKA","MAIKA"],["2013-12-24T00:00:00+09:00","メルリ","メルリ"],["2014-01-16T00:00:00+09:00","Megpoid Talk","Megpoid Talk"],["2014-01-31T00:00:00+09:00","マクネナナ","マクネナナ"],["2014-02-04T00:00:00+09:00","MEIKO V3","MEIKO V3"],["2014-02-14T00:00:00+09:00","kokone（心響）","kokone（心響）"],["2014-03-03T00:00:00+09:00","杏音","杏音"],["2014-03-03T00:00:00+09:00","鳥音","鳥音"],["2014-03-26T00:00:00+09:00","iVメルリ","iVメルリ"],["2014-05-09T00:00:00+09:00","flower","flower"],["2014-06-05T00:00:00+09:00","東北ずん子","東北ずん子"],["2014-06-27T00:00:00+09:00","IA ROCKS  ARIA ON THE PLANETES ","IA ROCKS  ARIA ON THE PLANETES "],["2014-08-01T00:00:00+09:00","galaco NEO","galaco NEO"],["2014-09-09T00:00:00+09:00","Rana","Rana"],["2014-09-17T00:00:00+09:00","VOCALOID3 ガチャッポイド","VOCALOID3 ガチャッポイド"],["2014-10-16T00:00:00+09:00","Chika","Chika"],["2014-11-20T00:00:00+09:00","CeVIO さとうささらソングボイス","CeVIO さとうささらソングボイス"],["2014-12-10T00:00:00+09:00","Hide","Hide"],["2014-12-18T00:00:00+09:00","VY1V4","VY1V4"],["2015-02-04T00:00:00+09:00","CYBER DIVA","CYBER DIVA"],["2015-02-10T00:00:00+09:00","心華","心華"],["2015-03-18T00:00:00+09:00","V4結月ゆかり コンプリート","V4結月ゆかり コンプリート"],["2015-03-18T00:00:00+09:00","V4結月ゆかり 穏","V4結月ゆかり 穏"],["2015-03-18T00:00:00+09:00","V4結月ゆかり 純","V4結月ゆかり 純"],["2015-03-18T00:00:00+09:00","V4結月ゆかり 凛","V4結月ゆかり 凛"],["2015-03-19T00:00:00+09:00","巡音ルカV4X","巡音ルカV4X"],["2015-04-30T00:00:00+09:00","がくっぽいどV4","がくっぽいどV4"],["2015-06-18T00:00:00+09:00","開発コードmikiV4","開発コードmikiV4"],["2015-06-18T00:00:00+09:00","猫村いろはV4","猫村いろはV4"],["2015-06-24T00:00:00+09:00","アルスロイド","アルスロイド"],["2015-07-12T00:00:00+09:00","V4 Flower","V4 Flower"],["2015-07-17T00:00:00+09:00","楽正綾","楽正綾"],["2015-07-27T00:00:00+09:00","Sachiko","Sachiko"],["2015-09-20T00:00:00+09:00","アルスロイド(製品版）","アルスロイド(製品版）"],["2015-10-07T00:00:00+09:00","Ruby","Ruby"],["2015-10-29T00:00:00+09:00","歌愛ユキV4","歌愛ユキV4"],["2015-10-29T00:00:00+09:00","氷山キヨテルV4","氷山キヨテルV4"],["2015-11-05T00:00:00+09:00","メグッポイドV4","メグッポイドV4"],["2015-11-21T00:00:00+09:00","DAINA","DAINA"],["2015-11-21T00:00:00+09:00","DEX","DEX"],["2015-12-01T00:00:00+09:00","Rana V4","Rana V4"],["2015-12-21T00:00:00+09:00","VOCALOID SDK for Unity","VOCALOID SDK for Unity"],["2015-12-24T00:00:00+09:00","鏡音レンV4X","鏡音レンV4X"],["2016-01-14T00:00:00+09:00","unity chan!","unity chan!"],["2016-01-28T00:00:00+09:00","Fukase","Fukase"],["2016-02-20T00:00:00+09:00","星塵","星塵"],["2016-07-30T00:00:00+09:00","音街ウナ（sugar、spicy）","音街ウナ（sugar、spicy）"],["2016-08-31T00:00:00+09:00","初音ミク V4 ENGLISH","初音ミク V4 ENGLISH"],["2016-08-31T00:00:00+09:00","初音ミク V4X バンドル","初音ミク V4X バンドル"],["2016-08-31T00:00:00+09:00","初音ミク V4X（ORIGINAL、SWEET、DARK、SOFT、SOLID）","初音ミク V4X（ORIGINAL、SWEET、DARK、SOFT、SOLID）"],["2016-10-26T00:00:00+09:00","東北ずん子 V4 ナチュラル","東北ずん子 V4 ナチュラル"],["2016-10-31T00:00:00+09:00","Cyber Songman","Cyber Songman"],["2016-12-15T00:00:00+09:00","マクネナナ プチ","マクネナナ プチ"],["2016-12-15T00:00:00+09:00","マクネナナV4 English","マクネナナV4 English"],["2016-12-15T00:00:00+09:00","マクネナナV4 ナチュラル","マクネナナV4 ナチュラル"],["2017-02-14T00:00:00+09:00","UNI","UNI"],["2017-02-16T00:00:00+09:00","兎眠りおんV4","兎眠りおんV4"],["2017-02-16T00:00:00+09:00","夢眠ネム","夢眠ネム"],["2017-05-10T00:00:00+09:00","楽正龍牙","楽正龍牙"],["2017-05-22T00:00:00+09:00","UTAUずんだもん","UTAUずんだもん"],["2017-06-01T00:00:00+09:00","UTAU沖縄あわも","UTAU沖縄あわも"],["2017-06-11T00:00:00+09:00","正岡小豆","正岡小豆"],["2017-07-12T00:00:00+09:00","AZUKI","AZUKI"],["2017-07-12T00:00:00+09:00","MATCHA","MATCHA"],["2017-08-30T00:00:00+09:00","LUMi","LUMi"],["2017-08-31T00:00:00+09:00","初音ミク V4 CHINESE","初音ミク V4 CHINESE"],["2017-09-13T00:00:00+09:00","小林抹茶","小林抹茶"],["2017-09-22T00:00:00+09:00","心華V4","心華V4"],["2017-10-10T00:00:00+09:00","AquesTalk10","AquesTalk10"],["2018-04-26T00:00:00+09:00","紲星あかり","紲星あかり"],["2018-05-21T00:00:00+09:00","洛天依(日本語版)","洛天依(日本語版)"],["2018-05-24T00:00:00+09:00","ミライ小町","ミライ小町"],["2018-07-12T00:00:00+09:00","VOCALOID5/PREMIUM","VOCALOID5/PREMIUM"],["2018-07-26T00:00:00+09:00","桜乃そら ナチュラル/クール","桜乃そら ナチュラル/クール"],["2018-08-02T00:00:00+09:00","徵羽摩柯/墨清弦","徵羽摩柯/墨清弦"],["2021-06-18T00:00:00+09:00","SynthesizerV AI 弦巻マキ","SynthesizerV AI 弦巻マキ"],["2021-07-07T00:00:00+09:00","音楽的同位体 可不","音楽的同位体 可不"],["2021-08-01T00:00:00+09:00","VOICEVOXずんだもん","VOICEVOXずんだもん"],["2021-08-05T00:00:00+09:00","CeVIO AI さとうささらソングボイス","CeVIO AI さとうささらソングボイス"],["2021-08-05T00:00:00+09:00","CeVIO AI さとうささらトークボイス","CeVIO AI さとうささらトークボイス"],["2022-04-29T00:00:00+09:00","音楽的同位体 星界","音楽的同位体 星界"],["2022-08-01T00:00:00+09:00","NEUTRINOずんだもん","NEUTRINOずんだもん"],["2022-08-13T00:00:00+09:00","AquesTalkPlayer","AquesTalkPlayer"],["2022-09-05T00:00:00+09:00","VoiSona さとうささら 日本語ソングボイスライブラリ","VoiSona さとうささら 日本語ソングボイスライブラリ"],["2022-10-13T00:00:00+09:00","AI Megpoid","AI Megpoid"],["2022-10-13T00:00:00+09:00","HARUKA","HARUKA"],["2022-10-13T00:00:00+09:00","AKITO","AKITO"],["2022-10-13T00:00:00+09:00","ALLEN","ALLEN"],["2022-10-13T00:00:00+09:00","SARAH","SARAH"],["2022-10-25T00:00:00+09:00","音楽的同位体 裏命(RIME)        ","音楽的同位体 裏命(RIME)        "],["2022-11-29T00:00:00+09:00","Seiren Voice ずんだもん","Seiren Voice ずんだもん"],["2022-12-21T00:00:00+09:00","夢ノ結唱 BanG Dream! AI Singing Synthesizer POPY\t","夢ノ結唱 BanG Dream! AI Singing Synthesizer POPY\t"],["2022-12-21T00:00:00+09:00","夢ノ結唱 BanG Dream! AI Singing","夢ノ結唱 BanG Dream! AI Singing"],["2022-12-21T00:00:00+09:00"," Synthesizer ROSE\tSynthesizer V AI 夢ノ結唱 ROSE"," Synthesizer ROSE\tSynthesizer V AI 夢ノ結唱 ROSE"],["2023-01-25T00:00:00+09:00","音楽的同位体 狐子（COKO）","音楽的同位体 狐子（COKO）"],["2023-02-13T00:00:00+09:00","VOCALOID5「洛天依 V5」「言和 V5」「楽正綾 V5」","VOCALOID5「洛天依 V5」「言和 V5」「楽正綾 V5」"],["2023-02-26T00:00:00+09:00","#kzn","#kzn"],["2023-03-07T00:00:00+09:00","Po uta","Po uta"],["2023-04-21T00:00:00+09:00","VoiSona","VoiSona"],["2023-05-09T00:00:00+09:00","符色  ","符色  "],["2023-06-20T00:00:00+09:00","VOCALOID6「ZOLA PROJECT」","VOCALOID6「ZOLA PROJECT」"],["2023-06-22T00:00:00+09:00","VOCALOID6「AI 音街ウナ」","VOCALOID6「AI 音街ウナ」"],["2023-07-13T00:00:00+09:00","MYK IV","MYK IV"],["2023-09-01T00:00:00+09:00","VoiSona Talk さとうささら日本語トークボイスライブラリ","VoiSona Talk さとうささら日本語トークボイスライブラリ"],["2023-09-23T00:00:00+09:00","VX β ボイスバンク（花奏かのんβ、杏戸ゆげβ、Ciちゃんβ、春日部つむぎβ）","VX β ボイスバンク（花奏かのんβ、杏戸ゆげβ、Ciちゃんβ、春日部つむぎβ）"],["2023-12-14T00:00:00+09:00","AiSuu","AiSuu"],["2023-12-20T00:00:00+09:00","SynthesizerV AI Megpoid","SynthesizerV AI Megpoid"],["2023-12-21T00:00:00+09:00","Synthesizer V AI 夢ノ結唱 POPY","Synthesizer V AI 夢ノ結唱 POPY"],["2023-12-24T00:00:00+09:00","ASAHI","ASAHI"],["2023-12-24T00:00:00+09:00","SAKURA","SAKURA"],["2023-12-24T00:00:00+09:00","TAKU","TAKU"],["2023-12-24T00:00:00+09:00","SHION/VOCALOID","SHION/VOCALOID"],["2024-01-25T00:00:00+09:00","音楽的同位体 狐子 TALK EXTENSION collaboration with VOICEPEAK","音楽的同位体 狐子 TALK EXTENSION collaboration with VOICEPEAK"],["2024-04-18T00:00:00+09:00","VOCALOID6「花響琴」","VOCALOID6「花響琴」"],["2024-04-24T00:00:00+09:00","VOCALOID6「式狼縁」","VOCALOID6「式狼縁」"],["2024-04-26T00:00:00+09:00","CeVIO AI ユニちゃん","CeVIO AI ユニちゃん"],["2024-07-04T00:00:00+09:00","VOCALOID6「AI Megpoid SOLID」","VOCALOID6「AI Megpoid SOLID」"],["2024-07-18T00:00:00+09:00","VOCALOID6「ゲキヤクV」カゼヒキV」","VOCALOID6「ゲキヤクV」カゼヒキV」"],["2024-08-05T00:00:00+09:00","VOCALOID6「galaco BLACK」「galaco WHITE」","VOCALOID6「galaco BLACK」「galaco WHITE」"],["2024-09-30T00:00:00+09:00","VOCALOID6「ついなちゃん」","VOCALOID6「ついなちゃん」"],["2024-10-09T00:00:00+09:00","VOCALOID6「ボカロのCiちゃん」","VOCALOID6「ボカロのCiちゃん」"],["2024-11-27T00:00:00+09:00","VOCALOID6「花奏」","VOCALOID6「花奏」"]],"sc":[["2020-06-07T00:00:00+09:00","ミクオの日","ミクオの日"],["2020-03-09T00:00:00+09:00","ミクの日","ミクの日"],["2020-09-03T00:00:00+09:00","GUMIの日","GUMIの日"],["2020-09-03T00:00:00+09:00","亞北ネルの日","亞北ネルの日"],["2020-08-09T00:00:00+09:00","ハクさんの日","ハクさんの日"],["2020-12-05T00:00:00+09:00","ずんだもん誕生日","ずんだもん誕生日"],["2020-01-22T00:00:00+09:00","さとうささら誕生日","さとうささら誕生日"],["2020-11-01T00:00:00+09:00","沖縄あわも誕生日","沖縄あわも誕生日"],["2020-02-23T00:00:00+09:00","すずきつづみ誕生日","すずきつづみ誕生日"]],"ds":[["2009-07-02T00:00:00+09:00","初音ミク  Project DIVA ","初音ミク  Project DIVA "],["2010-05-20T00:00:00+09:00","初音ミク ボカロ×ライブ!","初音ミク ボカロ×ライブ!"],["2010-06-23T00:00:00+09:00","初音ミク Project DIVA Arcade","初音ミク Project DIVA Arcade"],["2010-06-24T00:00:00+09:00","初音ミク  Project DIVA  ドリーミーシアター","初音ミク  Project DIVA  ドリーミーシアター"],["2010-07-29T00:00:00+09:00","初音ミク  Project DIVA  2nd","初音ミク  Project DIVA  2nd"],["2010-08-10T00:00:00+09:00","初音ミク ボカロ×ライブ!","初音ミク ボカロ×ライブ!"],["2011-01-27T00:00:00+09:00","初音ミク Project DIVA Arcade Version A","初音ミク Project DIVA Arcade Version A"],["2011-08-04T00:00:00+09:00","初音ミク  Project DIVA  ドリーミーシアター2nd","初音ミク  Project DIVA  ドリーミーシアター2nd"],["2011-11-10T00:00:00+09:00","初音ミク  Project DIVA  extend","初音ミク  Project DIVA  extend"],["2012-02-20T00:00:00+09:00","初音ミク ぐらふぃコレクション","初音ミク ぐらふぃコレクション"],["2012-03-08T00:00:00+09:00","初音ミク Project mirai","初音ミク Project mirai"],["2012-03-09T00:00:00+09:00","ミクフリック","ミクフリック"],["2012-08-10T00:00:00+09:00","ミクフリック／02","ミクフリック／02"],["2012-08-30T00:00:00+09:00","初音ミク  Project DIVA  f","初音ミク  Project DIVA  f"],["2012-09-13T00:00:00+09:00","初音ミク  Project DIVA  ドリーミーシアターextend","初音ミク  Project DIVA  ドリーミーシアターextend"],["2012-10-04T00:00:00+09:00","初音ミク Project DIVA Arcade Version B","初音ミク Project DIVA Arcade Version B"],["2012-11-08T00:00:00+09:00","初音ミク ライブステージ プロデューサー","初音ミク ライブステージ プロデューサー"],["2012-12-06T00:00:00+09:00","初音ミク ライブステージ プロデューサー","初音ミク ライブステージ プロデューサー"],["2013-03-07T00:00:00+09:00","初音ミク  Project DIVA  F","初音ミク  Project DIVA  F"],["2013-03-11T00:00:00+09:00","初音ミク ぐらふぃコレクション","初音ミク ぐらふぃコレクション"],["2013-03-28T00:00:00+09:00","Megpoid the Music #","Megpoid the Music #"],["2013-09-10T00:00:00+09:00","Miku Miku Hockey","Miku Miku Hockey"],["2013-11-21T00:00:00+09:00","初音ミク Project DIVA Arcade Future Tone","初音ミク Project DIVA Arcade Future Tone"],["2013-11-28T00:00:00+09:00","初音ミク Project mirai 2","初音ミク Project mirai 2"],["2014-02-13T00:00:00+09:00","Miku Miku Hockey 2.0が","Miku Miku Hockey 2.0が"],["2014-03-27T00:00:00+09:00","初音ミク  Project DIVA  F 2nd","初音ミク  Project DIVA  F 2nd"],["2014-10-28T00:00:00+09:00","初音ミクぐらふぃコレクション なぞの音楽すい星","初音ミクぐらふぃコレクション なぞの音楽すい星"],["2014-11-05T00:00:00+09:00","初音ミク Project DIVA Arcade Future Tone Version A REVISION1","初音ミク Project DIVA Arcade Future Tone Version A REVISION1"],["2015-05-28T00:00:00+09:00","初音ミク Project mirai でらっくす","初音ミク Project mirai でらっくす"],["2015-07-30T00:00:00+09:00","IA/VT  COLORFUL ","IA/VT  COLORFUL "],["2016-02-17T00:00:00+09:00","初音ミク Project DIVA Arcade Future Tone Version B","初音ミク Project DIVA Arcade Future Tone Version B"],["2016-03-24T00:00:00+09:00","初音ミク  Project DIVA  X","初音ミク  Project DIVA  X"],["2016-06-23T00:00:00+09:00","初音ミク Project DIVA Future Tone Prelude／Future Sound／Colorful Tone","初音ミク Project DIVA Future Tone Prelude／Future Sound／Colorful Tone"],["2016-08-24T00:00:00+09:00","初音ミク Project DIVA Arcade Future Tone Version B REVISION1","初音ミク Project DIVA Arcade Future Tone Version B REVISION1"],["2016-08-25T00:00:00+09:00","初音ミク  Project DIVA  X HD","初音ミク  Project DIVA  X HD"],["2016-10-13T00:00:00+09:00","初音ミク VRフューチャーライブ　1st Stage","初音ミク VRフューチャーライブ　1st Stage"],["2016-10-20T00:00:00+09:00","初音ミク Project DIVA Arcade Future Tone Version B REVISION2","初音ミク Project DIVA Arcade Future Tone Version B REVISION2"],["2016-11-10T00:00:00+09:00","初音ミク VRフューチャーライブ　2nd Stage","初音ミク VRフューチャーライブ　2nd Stage"],["2016-12-14T00:00:00+09:00","初音ミク Project DIVA Arcade Future Tone Version B REVISION3","初音ミク Project DIVA Arcade Future Tone Version B REVISION3"],["2016-12-15T00:00:00+09:00","初音ミク VRフューチャーライブ　3rd Stage","初音ミク VRフューチャーライブ　3rd Stage"],["2017-11-22T00:00:00+09:00","初音ミク Project DIVA Future Tone DX","初音ミク Project DIVA Future Tone DX"],["2018-03-09T00:00:00+09:00","初音ミク VR","初音ミク VR"],["2019-12-05T00:00:00+09:00","初音ミク VR","初音ミク VR"],["2020-02-13T00:00:00+09:00","初音ミク  Project DIVA MEGA39’s","初音ミク  Project DIVA MEGA39’s"],["2020-06-25T00:00:00+09:00","初音ミク  TAP WONDER ","初音ミク  TAP WONDER "],["2020-09-30T00:00:00+09:00","プロジェクトセカイ カラフルステージ！ feat. 初音ミク","プロジェクトセカイ カラフルステージ！ feat. 初音ミク"],["2021-06-24T00:00:00+09:00","初音ミク みんなで大富豪","初音ミク みんなで大富豪"],["2021-12-08T00:00:00+09:00","Project SEKAI COLORFUL STAGE! feat. Hatsune Miku ","Project SEKAI COLORFUL STAGE! feat. Hatsune Miku "],["2021-12-08T00:00:00+09:00","世界計畫繽紛舞台！ feat.初音未來","世界計畫繽紛舞台！ feat.初音未來"],["2022-03-24T00:00:00+09:00","初音ミク いっしょに！ジグソーパズル","初音ミク いっしょに！ジグソーパズル"],["2022-05-20T00:00:00+09:00","프로젝트 세카이 컬러풀 스테이지！ feat. 하츠네 미쿠","프로젝트 세카이 컬러풀 스테이지！ feat. 하츠네 미쿠"],["2022-05-27T00:00:00+09:00","初音ミク Project DIVA MEGA39’s+","初音ミク Project DIVA MEGA39’s+"],["2022-06-24T00:00:00+09:00","初音ミク いっしょに！ジグソーパズル","初音ミク いっしょに！ジグソーパズル"],["2023-03-17T00:00:00+09:00","ピアプロキャラクターズ×たまごっち","ピアプロキャラクターズ×たまごっち"],["2024-03-07T00:00:00+09:00","Fit Boxing feat. 初音ミク  ミクといっしょにエクササイズ ","Fit Boxing feat. 初音ミク  ミクといっしょにエクササイズ "],["2023-06-08T00:00:00+09:00","初音ミク 不思議なホシと願いのかけら","初音ミク 不思議なホシと願いのかけら"],["2024-04-22T00:00:00+09:00","初音ミク 不思議なホシと願いのかけら","初音ミク 不思議なホシと願いのかけら"],["2020-01-08T00:00:00+09:00","日野森志歩","日野森志歩"],["2020-01-27T00:00:00+09:00","朝比奈まふゆ","朝比奈まふゆ"],["2020-01-30T00:00:00+09:00","巡音ルカ","巡音ルカ"],["2020-02-10T00:00:00+09:00","宵崎奏","宵崎奏"],["2020-02-17T00:00:00+09:00","KAITO","KAITO"],["2020-03-02T00:00:00+09:00","小豆沢こはね","小豆沢こはね"],["2020-03-19T00:00:00+09:00","桃井愛莉","桃井愛莉"],["2020-04-14T00:00:00+09:00","花里みのり","花里みのり"],["2020-04-30T00:00:00+09:00","東雲絵名","東雲絵名"],["2020-05-09T00:00:00+09:00","天馬咲希","天馬咲希"],["2020-05-17T00:00:00+09:00","天馬司","天馬司"],["2020-05-25T00:00:00+09:00","青柳冬弥","青柳冬弥"],["2020-06-24T00:00:00+09:00","神代類","神代類"],["2020-07-20T00:00:00+09:00","草薙寧々","草薙寧々"],["2020-07-26T00:00:00+09:00","白石杏","白石杏"],["2020-08-11T00:00:00+09:00","星乃一歌","星乃一歌"],["2020-08-27T00:00:00+09:00","暁山瑞希","暁山瑞希"],["2020-08-31T00:00:00+09:00","初音ミク","初音ミク"],["2020-09-09T00:00:00+09:00","鳳えむ","鳳えむ"],["2020-10-05T00:00:00+09:00","桐谷遥","桐谷遥"],["2020-10-27T00:00:00+09:00","望月穂波","望月穂波"],["2020-11-05T00:00:00+09:00","MEIKO","MEIKO"],["2020-11-12T00:00:00+09:00","東雲彰人","東雲彰人"],["2020-12-06T00:00:00+09:00","日野森雫","日野森雫"],["2020-12-27T00:00:00+09:00","鏡音レン","鏡音レン"],["2020-12-27T00:00:00+09:00","鏡音リン","鏡音リン"],["2004-01-15T00:00:00+09:00","LEON","LEON"],["2004-01-15T00:00:00+09:00","LOLA","LOLA"],["2004-07-01T00:00:00+09:00","MIRIAM","MIRIAM"],["2004-11-05T00:00:00+09:00","MEIKO","MEIKO"],["2006-02-17T00:00:00+09:00","KAITO","KAITO"],["2006-05-25T00:00:00+09:00","AquesTalk1","AquesTalk1"],["2007-06-29T00:00:00+09:00","SweetAnn","SweetAnn"],["2007-08-31T00:00:00+09:00","初音ミク","初音ミク"],["2007-09-04T00:00:00+09:00","はちゅねミク","はちゅねミク"],["2007-10-17T00:00:00+09:00","雑音ミク","雑音ミク"],["2007-10-20T00:00:00+09:00","ざちゅねミク","ざちゅねミク"],["2007-10-27T00:00:00+09:00","初音ミクオ","初音ミクオ"],["2007-10-30T00:00:00+09:00","終音ニク","終音ニク"],["2007-11-01T00:00:00+09:00","亞北ネル","亞北ネル"],["2007-11-04T00:00:00+09:00","つくねミク","つくねミク"],["2007-11-08T00:00:00+09:00","かぐぁみねリン","かぐぁみねリン"],["2007-11-14T00:00:00+09:00","あちたねりゅ","あちたねりゅ"],["2007-11-16T00:00:00+09:00","和音ミク","和音ミク"],["2007-11-21T00:00:00+09:00","弱音ハク","弱音ハク"],["2007-11-22T00:00:00+09:00","亞北ネロ","亞北ネロ"],["2007-11-30T00:00:00+09:00","鈴音フク","鈴音フク"],["2007-12-02T00:00:00+09:00","鈴音リン","鈴音リン"],["2007-12-14T00:00:00+09:00","隣音サイ","隣音サイ"],["2007-12-16T00:00:00+09:00","MEITO","MEITO"],["2007-12-22T00:00:00+09:00","耗夜メテ","耗夜メテ"],["2007-12-23T00:00:00+09:00","ミクカル様","ミクカル様"],["2007-12-24T00:00:00+09:00","闇音アク","闇音アク"],["2007-12-26T00:00:00+09:00","ブラック★ロックシューター","ブラック★ロックシューター"],["2007-12-27T00:00:00+09:00","阿久女イク","阿久女イク"],["2007-12-27T00:00:00+09:00","鏡音リン","鏡音リン"],["2007-12-27T00:00:00+09:00","鏡音レン","鏡音レン"],["2007-12-28T00:00:00+09:00","鏡音ロン","鏡音ロン"],["2008-01-14T00:00:00+09:00","PRIMA","PRIMA"],["2008-01-18T00:00:00+09:00","鋼音ミク","鋼音ミク"],["2008-01-19T00:00:00+09:00","華音ミル","華音ミル"],["2008-01-21T00:00:00+09:00","迷子","迷子"],["2008-02-02T00:00:00+09:00","ギロカクたん","ギロカクたん"],["2008-02-06T00:00:00+09:00","子守音レム","子守音レム"],["2008-02-12T00:00:00+09:00","AKAITO","AKAITO"],["2008-02-15T00:00:00+09:00","乙音ペケ","乙音ペケ"],["2008-02-15T00:00:00+09:00","呪音キク","呪音キク"],["2008-02-17T00:00:00+09:00","焼音ニク","焼音ニク"],["2008-03-14T00:00:00+09:00","帯人","帯人"],["2008-03-16T00:00:00+09:00","KIKAITO","KIKAITO"],["2008-03-24T00:00:00+09:00","外れミク","外れミク"],["2008-03-24T00:00:00+09:00","初音三久","初音三久"],["2008-03-28T00:00:00+09:00","鏡音リント","鏡音リント"],["2008-04-01T00:00:00+09:00","重音テト","重音テト"],["2008-04-05T00:00:00+09:00","亞乃音ムリ","亞乃音ムリ"],["2008-04-09T00:00:00+09:00","ニガイト","ニガイト"],["2008-04-10T00:00:00+09:00","機械人（キカイト）","機械人（キカイト）"],["2008-04-11T00:00:00+09:00","咲音メイコ","咲音メイコ"],["2008-05-23T00:00:00+09:00","本音デル","本音デル"],["2008-06-21T00:00:00+09:00","太目ニク","太目ニク"],["2008-07-18T00:00:00+09:00","鏡音リンact2","鏡音リンact2"],["2008-07-18T00:00:00+09:00","鏡音レンact2","鏡音レンact2"],["2008-07-20T00:00:00+09:00","風見音セン","風見音セン"],["2008-07-20T00:00:00+09:00","風見音レツ","風見音レツ"],["2008-07-31T00:00:00+09:00","がくっぽいど","がくっぽいど"],["2008-07-31T00:00:00+09:00","神威がくぽ","神威がくぽ"],["2008-08-08T00:00:00+09:00","しゃきねめ～こ","しゃきねめ～こ"],["2008-11-17T00:00:00+09:00","欲音ルコ","欲音ルコ"],["2009-01-08T00:00:00+09:00","たこルカ","たこルカ"],["2009-01-09T00:00:00+09:00","ルカントさん","ルカントさん"],["2009-01-30T00:00:00+09:00","巡音ルカ","巡音ルカ"],["2009-03-15T00:00:00+09:00","骸音シーエ","骸音シーエ"],["2009-06-26T00:00:00+09:00","VOCALOID2 Megpoid","VOCALOID2 Megpoid"],["2009-07-15T00:00:00+09:00","SONIKA","SONIKA"],["2009-08-06T00:00:00+09:00","鏡音レンカ","鏡音レンカ"],["2009-10-06T00:00:00+09:00","CV 4Cβ","CV 4Cβ"],["2009-10-12T00:00:00+09:00","波音リツ","波音リツ"],["2009-10-24T00:00:00+09:00","雪女ミク","雪女ミク"],["2009-12-04T00:00:00+09:00","miki（SF A2 開発コードmiki）","miki（SF A2 開発コードmiki）"],["2009-12-04T00:00:00+09:00","SF A2 開発コード miki","SF A2 開発コード miki"],["2009-12-04T00:00:00+09:00","歌愛ユキ","歌愛ユキ"],["2009-12-04T00:00:00+09:00","氷山キヨテル","氷山キヨテル"],["2009-12-17T00:00:00+09:00","リンの幼虫","リンの幼虫"],["2009-12-22T00:00:00+09:00","BIG AL","BIG AL"],["2010-01-27T00:00:00+09:00","AquesTalk2","AquesTalk2"],["2010-02-02T00:00:00+09:00","シテヤンヨ","シテヤンヨ"],["2010-04-30T00:00:00+09:00","初音ミクAppend","初音ミクAppend"],["2010-06-19T00:00:00+09:00","健音テイ","健音テイ"],["2010-07-13T00:00:00+09:00","TONIO","TONIO"],["2010-07-29T00:00:00+09:00","ハニーリリー","ハニーリリー"],["2010-08-25T00:00:00+09:00","Lily","Lily"],["2010-09-01T00:00:00+09:00","VY1","VY1"],["2010-10-05T00:00:00+09:00","VY1iV","VY1iV"],["2010-10-08T00:00:00+09:00","リュウト","リュウト"],["2010-10-08T00:00:00+09:00","怨音リナ","怨音リナ"],["2010-10-22T00:00:00+09:00","猫村いろは","猫村いろは"],["2010-11-06T00:00:00+09:00","まるくなるミク","まるくなるミク"],["2010-12-08T00:00:00+09:00","歌手音ピコ","歌手音ピコ"],["2010-12-27T00:00:00+09:00","鏡音リンAppend","鏡音リンAppend"],["2010-12-27T00:00:00+09:00","鏡音レンAppend","鏡音レンAppend"],["2011-02-14T00:00:00+09:00","刹音セレ","刹音セレ"],["2011-03-08T00:00:00+09:00","しゅしゅミク","しゅしゅミク"],["2011-04-25T00:00:00+09:00","VY2","VY2"],["2011-05-01T00:00:00+09:00","おどおどハク","おどおどハク"],["2011-05-01T00:00:00+09:00","つんつんネル","つんつんネル"],["2011-07-24T00:00:00+09:00","植木ロイド","植木ロイド"],["2011-08-30T00:00:00+09:00","SeeU","SeeU"],["2011-09-01T00:00:00+09:00","VY2iV","VY2iV"],["2011-09-06T00:00:00+09:00","あきこロイドちゃん","あきこロイドちゃん"],["2011-09-17T00:00:00+09:00","ミクダヨー","ミクダヨー"],["2011-10-12T00:00:00+09:00","とてとてテト","とてとてテト"],["2011-10-21T00:00:00+09:00","Mew","Mew"],["2011-10-21T00:00:00+09:00","VOCALOID3 Megpoid（Power、Adult、Sweet、Whisper）","VOCALOID3 Megpoid（Power、Adult、Sweet、Whisper）"],["2011-10-21T00:00:00+09:00","VY1V3","VY1V3"],["2011-12-06T00:00:00+09:00","下火セツ","下火セツ"],["2011-12-16T00:00:00+09:00","兎眠りおん","兎眠りおん"],["2011-12-21T00:00:00+09:00","OLIVER","OLIVER"],["2011-12-22T00:00:00+09:00","CUL","CUL"],["2011-12-22T00:00:00+09:00","結月ゆかり（結月縁）","結月ゆかり（結月縁）"],["2011-12-23T00:00:00+09:00","Bruno","Bruno"],["2011-12-23T00:00:00+09:00","Clara","Clara"],["2012-01-27T00:00:00+09:00","IA  ARIA ON THE PLANETES","IA  ARIA ON THE PLANETES"],["2012-02-12T00:00:00+09:00","鏡音ノリン","鏡音ノリン"],["2012-03-16T00:00:00+09:00","VOCALOID3 Megpoid（ Native）","VOCALOID3 Megpoid（ Native）"],["2012-04-06T00:00:00+09:00","蒼姫ラピス","蒼姫ラピス"],["2012-04-19T00:00:00+09:00","VOCALOID3 Lily","VOCALOID3 Lily"],["2012-05-06T00:00:00+09:00","MAYU","MAYU"],["2012-06-03T00:00:00+09:00","まるくなるネル","まるくなるネル"],["2012-07-12T00:00:00+09:00","洛天依","洛天依"],["2012-07-13T00:00:00+09:00","VOCALOID3 がくっぽいど","VOCALOID3 がくっぽいど"],["2012-08-05T00:00:00+09:00","galaco","galaco"],["2012-08-29T00:00:00+09:00","ミクナノー","ミクナノー"],["2012-10-19T00:00:00+09:00","VY2V3","VY2V3"],["2012-11-26T00:00:00+09:00","iVラピス","iVラピス"],["2012-12-22T00:00:00+09:00","Avanna","Avanna"],["2013-02-15T00:00:00+09:00","KAITO V3","KAITO V3"],["2013-02-28T00:00:00+09:00","VOCALOID3 Megpoid（English）","VOCALOID3 Megpoid（English）"],["2013-04-05T00:00:00+09:00","SHION/UTAU","SHION/UTAU"],["2013-06-21T00:00:00+09:00","KYO","KYO"],["2013-06-21T00:00:00+09:00","WIL","WIL"],["2013-06-21T00:00:00+09:00","YUU","YUU"],["2013-07-11T00:00:00+09:00","言和","言和"],["2013-08-31T00:00:00+09:00","初音ミクV3（English）","初音ミクV3（English）"],["2013-09-10T00:00:00+09:00","YOHIOloid","YOHIOloid"],["2013-09-26T00:00:00+09:00","CeVIO Creative Studio","CeVIO Creative Studio"],["2013-09-26T00:00:00+09:00","初音ミクV3 バンドル（Original、Sweet、Dark、Soft、Solid、English）","初音ミクV3 バンドル（Original、Sweet、Dark、Soft、Solid、English）"],["2013-09-26T00:00:00+09:00","初音ミクV3（Original、Sweet、Dark、Soft、Solid）","初音ミクV3（Original、Sweet、Dark、Soft、Solid）"],["2013-09-26T00:00:00+09:00","CeVIO Creative Studio　すずきつづみ","CeVIO Creative Studio　すずきつづみ"],["2013-12-18T00:00:00+09:00","MAIKA","MAIKA"],["2013-12-24T00:00:00+09:00","メルリ","メルリ"],["2014-01-16T00:00:00+09:00","Megpoid Talk","Megpoid Talk"],["2014-01-31T00:00:00+09:00","マクネナナ","マクネナナ"],["2014-02-04T00:00:00+09:00","MEIKO V3","MEIKO V3"],["2014-02-14T00:00:00+09:00","kokone（心響）","kokone（心響）"],["2014-03-03T00:00:00+09:00","杏音","杏音"],["2014-03-03T00:00:00+09:00","鳥音","鳥音"],["2014-03-26T00:00:00+09:00","iVメルリ","iVメルリ"],["2014-05-09T00:00:00+09:00","flower","flower"],["2014-06-05T00:00:00+09:00","東北ずん子","東北ずん子"],["2014-06-27T00:00:00+09:00","IA ROCKS  ARIA ON THE PLANETES ","IA ROCKS  ARIA ON THE PLANETES "],["2014-08-01T00:00:00+09:00","galaco NEO","galaco NEO"],["2014-09-09T00:00:00+09:00","Rana","Rana"],["2014-09-17T00:00:00+09:00","VOCALOID3 ガチャッポイド","VOCALOID3 ガチャッポイド"],["2014-10-16T00:00:00+09:00","Chika","Chika"],["2014-11-20T00:00:00+09:00","CeVIO さとうささらソングボイス","CeVIO さとうささらソングボイス"],["2014-12-10T00:00:00+09:00","Hide","Hide"],["2014-12-18T00:00:00+09:00","VY1V4","VY1V4"],["2015-02-04T00:00:00+09:00","CYBER DIVA","CYBER DIVA"],["2015-02-10T00:00:00+09:00","心華","心華"],["2015-03-18T00:00:00+09:00","V4結月ゆかり コンプリート","V4結月ゆかり コンプリート"],["2015-03-18T00:00:00+09:00","V4結月ゆかり 穏","V4結月ゆかり 穏"],["2015-03-18T00:00:00+09:00","V4結月ゆかり 純","V4結月ゆかり 純"],["2015-03-18T00:00:00+09:00","V4結月ゆかり 凛","V4結月ゆかり 凛"],["2015-03-19T00:00:00+09:00","巡音ルカV4X","巡音ルカV4X"],["2015-04-30T00:00:00+09:00","がくっぽいどV4","がくっぽいどV4"],["2015-06-18T00:00:00+09:00","開発コードmikiV4","開発コードmikiV4"],["2015-06-18T00:00:00+09:00","猫村いろはV4","猫村いろはV4"],["2015-06-24T00:00:00+09:00","アルスロイド","アルスロイド"],["2015-07-12T00:00:00+09:00","V4 Flower","V4 Flower"],["2015-07-17T00:00:00+09:00","楽正綾","楽正綾"],["2015-07-27T00:00:00+09:00","Sachiko","Sachiko"],["2015-09-20T00:00:00+09:00","アルスロイド(製品版）","アルスロイド(製品版）"],["2015-10-07T00:00:00+09:00","Ruby","Ruby"],["2015-10-29T00:00:00+09:00","歌愛ユキV4","歌愛ユキV4"],["2015-10-29T00:00:00+09:00","氷山キヨテルV4","氷山キヨテルV4"],["2015-11-05T00:00:00+09:00","メグッポイドV4","メグッポイドV4"],["2015-11-21T00:00:00+09:00","DAINA","DAINA"],["2015-11-21T00:00:00+09:00","DEX","DEX"],["2015-12-01T00:00:00+09:00","Rana V4","Rana V4"],["2015-12-21T00:00:00+09:00","VOCALOID SDK for Unity","VOCALOID SDK for Unity"],["2015-12-24T00:00:00+09:00","鏡音レンV4X","鏡音レンV4X"],["2016-01-14T00:00:00+09:00","unity chan!","unity chan!"],["2016-01-28T00:00:00+09:00","Fukase","Fukase"],["2016-02-20T00:00:00+09:00","星塵","星塵"],["2016-07-30T00:00:00+09:00","音街ウナ（sugar、spicy）","音街ウナ（sugar、spicy）"],["2016-08-31T00:00:00+09:00","初音ミク V4 ENGLISH","初音ミク V4 ENGLISH"],["2016-08-31T00:00:00+09:00","初音ミク V4X バンドル","初音ミク V4X バンドル"],["2016-08-31T00:00:00+09:00","初音ミク V4X（ORIGINAL、SWEET、DARK、SOFT、SOLID）","初音ミク V4X（ORIGINAL、SWEET、DARK、SOFT、SOLID）"],["2016-10-26T00:00:00+09:00","東北ずん子 V4 ナチュラル","東北ずん子 V4 ナチュラル"],["2016-10-31T00:00:00+09:00","Cyber Songman","Cyber Songman"],["2016-12-15T00:00:00+09:00","マクネナナ プチ","マクネナナ プチ"],["2016-12-15T00:00:00+09:00","マクネナナV4 English","マクネナナV4 English"],["2016-12-15T00:00:00+09:00","マクネナナV4 ナチュラル","マクネナナV4 ナチュラル"],["2017-02-14T00:00:00+09:00","UNI","UNI"],["2017-02-16T00:00:00+09:00","兎眠りおんV4","兎眠りおんV4"],["2017-02-16T00:00:00+09:00","夢眠ネム","夢眠ネム"],["2017-05-10T00:00:00+09:00","楽正龍牙","楽正龍牙"],["2017-05-22T00:00:00+09:00","UTAUずんだもん","UTAUずんだもん"],["2017-06-01T00:00:00+09:00","UTAU沖縄あわも","UTAU沖縄あわも"],["2017-06-11T00:00:00+09:00","正岡小豆","正岡小豆"],["2017-07-12T00:00:00+09:00","AZUKI","AZUKI"],["2017-07-12T00:00:00+09:00","MATCHA","MATCHA"],["2017-08-30T00:00:00+09:00","LUMi","LUMi"],["2017-08-31T00:00:00+09:00","初音ミク V4 CHINESE","初音ミク V4 CHINESE"],["2017-09-13T00:00:00+09:00","小林抹茶","小林抹茶"],["2017-09-22T00:00:00+09:00","心華V4","心華V4"],["2017-10-10T00:00:00+09:00","AquesTalk10","AquesTalk10"],["2018-04-26T00:00:00+09:00","紲星あかり","紲星あかり"],["2018-05-21T00:00:00+09:00","洛天依(日本語版)","洛天依(日本語版)"],["2018-05-24T00:00:00+09:00","ミライ小町","ミライ小町"],["2018-07-12T00:00:00+09:00","VOCALOID5/PREMIUM","VOCALOID5/PREMIUM"],["2018-07-26T00:00:00+09:00","桜乃そら ナチュラル/クール","桜乃そら ナチュラル/クール"],["2018-08-02T00:00:00+09:00","徵羽摩柯/墨清弦","徵羽摩柯/墨清弦"],["2021-06-18T00:00:00+09:00","SynthesizerV AI 弦巻マキ","SynthesizerV AI 弦巻マキ"],["2021-07-07T00:00:00+09:00","音楽的同位体 可不","音楽的同位体 可不"],["2021-08-01T00:00:00+09:00","VOICEVOXずんだもん","VOICEVOXずんだもん"],["2021-08-05T00:00:00+09:00","CeVIO AI さとうささらソングボイス","CeVIO AI さとうささらソングボイス"],["2021-08-05T00:00:00+09:00","CeVIO AI さとうささらトークボイス","CeVIO AI さとうささらトークボイス"],["2022-04-29T00:00:00+09:00","音楽的同位体 星界","音楽的同位体 星界"],["2022-08-01T00:00:00+09:00","NEUTRINOずんだもん","NEUTRINOずんだもん"],["2022-08-13T00:00:00+09:00","AquesTalkPlayer","AquesTalkPlayer"],["2022-09-05T00:00:00+09:00","VoiSona さとうささら 日本語ソングボイスライブラリ","VoiSona さとうささら 日本語ソングボイスライブラリ"],["2022-10-13T00:00:00+09:00","AI Megpoid","AI Megpoid"],["2022-10-13T00:00:00+09:00","HARUKA","HARUKA"],["2022-10-13T00:00:00+09:00","AKITO","AKITO"],["2022-10-13T00:00:00+09:00","ALLEN","ALLEN"],["2022-10-13T00:00:00+09:00","SARAH","SARAH"],["2022-10-25T00:00:00+09:00","音楽的同位体 裏命(RIME)        ","音楽的同位体 裏命(RIME)        "],["2022-11-29T00:00:00+09:00","Seiren Voice ずんだもん","Seiren Voice ずんだもん"],["2022-12-21T00:00:00+09:00","夢ノ結唱 BanG Dream! AI Singing Synthesizer POPY\t","夢ノ結唱 BanG Dream! AI Singing Synthesizer POPY\t"],["2022-12-21T00:00:00+09:00","夢ノ結唱 BanG Dream! AI Singing","夢ノ結唱 BanG Dream! AI Singing"],["2022-12-21T00:00:00+09:00"," Synthesizer ROSE\tSynthesizer V AI 夢ノ結唱 ROSE"," Synthesizer ROSE\tSynthesizer V AI 夢ノ結唱 ROSE"],["2023-01-25T00:00:00+09:00","音楽的同位体 狐子（COKO）","音楽的同位体 狐子（COKO）"],["2023-02-13T00:00:00+09:00","VOCALOID5「洛天依 V5」「言和 V5」「楽正綾 V5」","VOCALOID5「洛天依 V5」「言和 V5」「楽正綾 V5」"],["2023-02-26T00:00:00+09:00","#kzn","#kzn"],["2023-03-07T00:00:00+09:00","Po uta","Po uta"],["2023-04-21T00:00:00+09:00","VoiSona","VoiSona"],["2023-05-09T00:00:00+09:00","符色  ","符色  "],["2023-06-20T00:00:00+09:00","VOCALOID6「ZOLA PROJECT」","VOCALOID6「ZOLA PROJECT」"],["2023-06-22T00:00:00+09:00","VOCALOID6「AI 音街ウナ」","VOCALOID6「AI 音街ウナ」"],["2023-07-13T00:00:00+09:00","MYK IV","MYK IV"],["2023-09-01T00:00:00+09:00","VoiSona Talk さとうささら日本語トークボイスライブラリ","VoiSona Talk さとうささら日本語トークボイスライブラリ"],["2023-09-23T00:00:00+09:00","VX β ボイスバンク（花奏かのんβ、杏戸ゆげβ、Ciちゃんβ、春日部つむぎβ）","VX β ボイスバンク（花奏かのんβ、杏戸ゆげβ、Ciちゃんβ、春日部つむぎβ）"],["2023-12-14T00:00:00+09:00","AiSuu","AiSuu"],["2023-12-20T00:00:00+09:00","SynthesizerV AI Megpoid","SynthesizerV AI Megpoid"],["2023-12-21T00:00:00+09:00","Synthesizer V AI 夢ノ結唱 POPY","Synthesizer V AI 夢ノ結唱 POPY"],["2023-12-24T00:00:00+09:00","ASAHI","ASAHI"],["2023-12-24T00:00:00+09:00","SAKURA","SAKURA"],["2023-12-24T00:00:00+09:00","TAKU","TAKU"],["2023-12-24T00:00:00+09:00","SHION/VOCALOID","SHION/VOCALOID"],["2024-01-25T00:00:00+09:00","音楽的同位体 狐子 TALK EXTENSION collaboration with VOICEPEAK","音楽的同位体 狐子 TALK EXTENSION collaboration with VOICEPEAK"],["2024-04-18T00:00:00+09:00","VOCALOID6「花響琴」","VOCALOID6「花響琴」"],["2024-04-24T00:00:00+09:00","VOCALOID6「式狼縁」","VOCALOID6「式狼縁」"],["2024-04-26T00:00:00+09:00","CeVIO AI ユニちゃん","CeVIO AI ユニちゃん"],["2024-07-04T00:00:00+09:00","VOCALOID6「AI Megpoid SOLID」","VOCALOID6「AI Megpoid SOLID」"],["2024-07-18T00:00:00+09:00","VOCALOID6「ゲキヤクV」カゼヒキV」","VOCALOID6「ゲキヤクV」カゼヒキV」"],["2024-08-05T00:00:00+09:00","VOCALOID6「galaco BLACK」「galaco WHITE」","VOCALOID6「galaco BLACK」「galaco WHITE」"],["2024-09-30T00:00:00+09:00","VOCALOID6「ついなちゃん」","VOCALOID6「ついなちゃん」"],["2024-10-09T00:00:00+09:00","VOCALOID6「ボカロのCiちゃん」","VOCALOID6「ボカロのCiちゃん」"],["2024-11-27T00:00:00+09:00","VOCALOID6「花奏」","VOCALOID6「花奏」"],["2020-06-07T00:00:00+09:00","ミクオの日","ミクオの日"],["2020-03-09T00:00:00+09:00","ミクの日","ミクの日"],["2020-09-03T00:00:00+09:00","GUMIの日","GUMIの日"],["2020-09-03T00:00:00+09:00","亞北ネルの日","亞北ネルの日"],["2020-08-09T00:00:00+09:00","ハクさんの日","ハクさんの日"],["2020-12-05T00:00:00+09:00","ずんだもん誕生日","ずんだもん誕生日"],["2020-01-22T00:00:00+09:00","さとうささら誕生日","さとうささら誕生日"],["2020-11-01T00:00:00+09:00","沖縄あわも誕生日","沖縄あわも誕生日"],["2020-02-23T00:00:00+09:00","すずきつづみ誕生日","すずきつづみ誕生日"]]}'
imassel={"cg","ml","sm","sc","ds"}
imasname={"みくさんげー","ぷろせか","ぼかろ","記念日","ALL"}

-- Function to set the time text

--http://lua-users.org/wiki/TimeZone
function get_timezone()
  local now = os.time()
  return os.difftime(now, os.time(os.date("!*t", now))) --サマーなしタイムゾーン時差情報 現在時間
end

function get_tzoffset(timezone)
  local h, m = math.modf(timezone / 3600)
  return string.format("%+.4d", 100 * h + 60 * m)
end

function get_tzoffset_sepa(timezone)
  local h, m = math.modf(timezone / 3600)
  return string.format("%+03d:%02d",  h ,math.abs(60 * m))
end

function get_timezone_offset(ts)  --サマー有りタイムゾーン時差情報 当時の時間
	local utcdate   = os.date("!*t", ts)
	local localdate = os.date("*t", ts)
	localdate.isdst = false -- this is the trick
	return os.difftime(os.time(localdate), os.time(utcdate))
end

function get_timezone_the_day()
  local hh = tonumber(string.format("%d",(tonumber(os.date("%z"))/100)))
  local mm= ((tonumber(os.date("%z"))-100*hh)/60)*3600
  local hhmm = hh*3600 +mm
  return hhmm  --サマー有りタイムゾーン時差情報 現在時間
end

function lefttime(dt) 
	local timedata= parse_json_date_utc(dt)
	if( type(timedata) == "string") then
	return dt
	end
	local t=timedata -os.time()
	return  t
end

function elasped(dt)
	local timedata= parse_json_date_utc(dt)
	if( type(timedata) == "string") then
	return dt
	end
	local t=timedata -os.time()
	return  -t
end

function DateUTC(y,M,D,h,m,s,ms)  --DATEUTCもどきMM月だけjsとおなじ-1月なので（）
local dt = string.format("%04d",tonumber(y)).."-".. string.format("%02d",tonumber(M)+1).."-".. string.format("%02d",tonumber(D))
	  dt = dt.."T".. string.format("%02d",tonumber(h))..":".. string.format("%02d",tonumber(m))
	  dt=  dt..":".. string.format("%02d",tonumber(s))..".".. string.format("%03d",tonumber(ms)).."Z"
	  
	  --debugtxt1 =dt
	  --debugtxt2 =parse_json_date_utc(dt)
	  --debugtxt3 =os.date("!%x %X %a ",parse_json_date_utc(dt))
	  
	return parse_json_date_utc(dt)
end


function JST(dt)
return os.date('!%Y/%m/%dT%X(JST)%a',parse_json_date_utc(dt)+3600*9)
end

function JSTday()
return os.date('!%d',os.time()+3600*9)
end

function ISOtoJST(dt)
return os.date('!%Y-%m-%dT%H:%M:%S+09:00',parse_json_date_utc(dt)+3600*9)
end

--custum timetable
function timezoneparse(tz)
local timezone={
{"ACDT","+1030"},
{"ACST","+0930"},
{"AEDT","+1100"},
{"AEST","+1000"},
{"AFT","+0430"},
{"AKDT","-0800"},
{"AKST","-0900"},
{"ART","-0300"},
{"AWDT","+0900"},
{"AWST","+0800"},
{"BDT","+0600"},
{"BNT","+0800"},
{"BOT","-0400"},
{"BRT","-0300"},
{"BST","+0100"},
{"BTT","+0600"},
{"CAT","+0200"},
{"CCT","+0630"},
{"cDT","-0400"},
{"CDT","-0500"},
{"CEST","+0200"},
{"CET","+0100"},
{"CLST","-0300"},
{"CLT","-0400"},
{"COT","-0500"},
{"cst","+0800"},
{"cST","-0500"},
{"CST","-0600"},
{"ChST","+1000"},
{"EAT","+0300"},
{"ECT","-0500"},
{"EDT","-0400"},
{"EEST","+0300"},
{"EET","+0200"},
{"EST","-0500"},
{"FJST","+1300"},
{"FJT","+1200"},
{"GMT","+0000"},
{"GST","+0400"},
{"HKT","+0800"},
{"HST","-1000"},
{"ICT","+0700"},
{"IDT","+0300"},
{"iST","+0200"},
{"IST","+0530"},
{"IRDT","+0430"},
{"IRST","+0330"},
{"JST","+0900"},
{"KST","+0900"},
{"MDT","-0600"},
{"MMT","+0630"},
{"MST","-0700"},
{"MYT","+0800"},
{"NPT","+0545"},
{"NZDT","+1300"},
{"NZST","+1200"},
{"PDT","-0700"},
{"PET","-0500"},
{"PHT","+0800"},
{"PKT","+0500"},
{"PST","-0800"},
{"PWT","+0900"},
{"SST","-1100"},
{"UT","+0000"},
{"UTC","+0000"},
{"UYT","-0300"},
{"WAT","+0100"},
{"WEST","+0100"},
{"WET","+0000"},
{"WIB","+0700"},
{"WIT","+0900"},
{"WITA","+0800"}}
--%a%a+$ paturn fix

if(tz=="UU")then
return get_tzoffset(utc*3600)
end

stlen=tonumber(#timezone)
for i=1,stlen do
if(tz==timezone[i][1])then
return timezone[i][2]
end
end

return nil
end


--https://claude.ai/chat/805aaf7b-938a-486f-afe0-3109f98fb181
-- RFC 2822 date parser
-- Example input: "Tue, 15 Nov 1994 08:12:31 +0200"

local months = {
    Jan = 1, Feb = 2, Mar = 3, Apr = 4, May = 5, Jun = 6,
    Jul = 7, Aug = 8, Sep = 9, Oct = 10, Nov = 11, Dec = 12
}

local weekdays = {
    Sun = 0, Mon = 1, Tue = 2, Wed = 3, Thu = 4, Fri = 5, Sat = 6
}

local function parse_timezone(tz)
    
    -- Parse numeric timezone (+0200 format)
    local sign, hour, min = tz:match("([+-])(%d%d)(%d%d)")
	if(sign)then
	else
	local tzval= timezoneparse(tz)
	if(tzval)then  sign, hour, min =  tzval:match("([+-])(%d%d)(%d%d)")  end
    end
    
    if sign and hour and min then
        local offset = tonumber(hour) * 3600 + tonumber(min) * 60
        return sign == "+" and offset or -offset
    end
    
    return nil
end

local function parse_rfc2822_date(date_string)
    -- Remove optional weekday and comma
    date_string = date_string:gsub("^%w+,%s*", "")
    
    
    local ymd = "(%d+)%s+(%a+)%s+(%d+)%s+([%a%d+-]+)"--ローカル時間MD
    local ymdh = "(%d+)%s+(%a+)%s+(%d+)%s+(%d+)%s+([%a%d+-]+)"--ローカル時間MD+h
    local ymdhm =  "(%d+)%s+(%a+)%s+(%d+)%s+(%d+):(%d+)%s+([%a%d+-]+)"--ローカル時間MD+HM
    local ymdhms = "(%d+)%s+(%a+)%s+(%d+)%s+(%d+):(%d+):(%d+)%s+([%a%d+-]+)"--ローカル時間MDhms
	
	local day, month, year, hour, min, sec, tz
	if(date_string:match(ymdhms))then
	day, month, year, hour, min, sec, tz = date_string:match(ymdhms)
	elseif(date_string:match(ymdhm))then
	day, month, year, hour, min, tz = date_string:match(ymdhm)
	 sec =0
	elseif(date_string:match(ymdh))then
	day, month, year, hour, tz = date_string:match(ymdh)
	 min, sec =0,0
	elseif(date_string:match(ymd))then
	day, month, year, tz = date_string:match(ymd)
	 hour, min, sec =0,0,0
	end
    
    if not (day and month and year and hour and min and tz) then
        return nil, "Invalid date format"
    end
    
    -- Convert components to numbers
    day = tonumber(day)
    year = tonumber(year)
    hour = tonumber(hour)
    min = tonumber(min)
    sec = tonumber(sec)
    
    -- Convert month name to number
    month = months[month]
    if not month then
        return nil, "Invalid month name"
    end
    
    -- Validate ranges
    if day < 1 or day > 31 or
       hour < 0 or hour > 23 or
       min < 0 or min > 59 or
       sec < 0 or sec > 59 then
        return nil, "Component out of range"
    end
    
    -- Handle two-digit years
    if year < 100 then
        year = year + (year >= 50 and 1900 or 2000)
    end
    
    -- Parse timezone
    local tz_offset = parse_timezone(tz)
    if not tz_offset then
        return nil, "Invalid timezone"
    end
    
    -- Return a table with parsed components
    return {
        year = year,
        month = month,
        day = day,
        hour = hour,
        min = min,
        sec = sec,
        tz_offset = tz_offset
    }
end


-- Example usage
local function test_parser()
    local test_dates = {
        --"Tue, 15 Nov 1994 08:12:31 +0200",  -- With seconds
        --"16 Nov 1994 08:12 GMT",            -- Without seconds
        --"17 Nov 94 08:12:31 EST",           -- With seconds, 2-digit year
        --"18 Nov 94 08:12 EDT",              -- Without seconds, 2-digit year
        --"19 Nov 94 08 EDT",              -- Without seconds, 2-digit year
        "11 Nov 94 EDT",              -- Without seconds, 2-digit year       
        "28 Nov 2024 22:00:00 JST",
        "28 Nov 2024 22:00 JST",
        "28 Nov 2024 22 +0900"

    }
    
    for _, date in ipairs(test_dates) do
        local result, err = parse_rfc2822_date(date)
        if result then
            print("Year:".. result.year)
            print("Month:".. result.month)
            print("Day:".. result.day)
            print("Hour:".. result.hour)
            print("Minute:".. result.min)
            print("Second:".. result.sec)
            print("Timezone offset (seconds):".. result.tz_offset)
        else
            print("Error:".. err)
        end
    end
end

function parse_json_date_utc(json_date) --ISO8601datetimeparse パーサー完成版？
    local pattern = "(%d+)%-(%d+)%-(%d+)%a(%d+)%:(%d+)%:([%d+.]+)([Z%+%-])(%d?%d?):?(%d?%d?)"

    if(json_date:match(pattern)==nil)then
     if(json_date:match("(%d+)%s+(%a+)%s+(%d+)(%s*%d*)(:?%d*)(:?%d*)%s+([%a%d+-]+)")) then --RFC2822
		local date=parse_rfc2822_date(json_date)
		if(date)then
        return preset_fairfield_dateutc(date.year,date.month,date.day) -date.tz_offset + date.hour*3600 + date.min*60 + date.sec
        else
        return "Invalid date"
        end
	 end
	 
   if(json_date:match("%s?%a%a+$")) then --try parse UTC FIX
    local normal = "(%d+)[%-%/](%d+)[%-%/](%d+) +(%d+)%:(%d+)%s?(%a%a+)$"--ローカル時間MD+HM
        if(json_date:match(normal))then
        local year, month, day, hour, min,tz = json_date:match(normal)
        local tz_offset= timezoneparse(tz)
        if(tz_offset)then
         return preset_fairfield_dateutc(year,month,day) -tz_offset + hour*3600 + min*60
        else
         return "Invalid date"
        end
        end
    end
    	 
    local unix = "^(%d+)$"
    local normalp = "(%d+)[%-%/](%d+)[%-%/](%d+)$"--ローカル時間MD
    local normalq = "(%d+)[%-%/](%d+)[%-%/](%d+) +(%d+)$"--ローカル時間MD+h
    local normal =  "(%d+)[%-%/](%d+)[%-%/](%d+) +(%d+)%:(%d+)$"--ローカル時間MD+HM
    local normalr = "(%d+)[%-%/](%d+)[%-%/](%d+) +(%d+)%:(%d+)%:([%d%.]+)"--ローカル時間MDhms

        if(json_date:match(normal))then
        local year, month, day, hour, minute,
        seconds = json_date:match(normal)
    	 return  os.time{year = year, month = month, day = day, hour =  hour, min = minute, sec = 0}
    	end
    	if(json_date:match(normalp))then
        local year, month, day, hour, minute,
        seconds = json_date:match(normalp)
    	 return  os.time{year = year, month = month, day = day, hour =  0, min =0, sec = 0}
    	end
    	 if(json_date:match(normalq))then
        local year, month, day, hour, minute,
        seconds = json_date:match(normalq)
    	 return  os.time{year = year, month = month, day = day, hour =  hour, min = 0, sec = 0}
    	end
    	if(json_date:match(normalr))then
        local year, month, day, hour, minute,
        seconds = json_date:match(normalr)
    	 return  os.time{year = year, month = month, day = day, hour =  hour, min = minute, sec = seconds}
    	end
    	if(json_date:match(unix)) then
	     return json_date
    	end
    
     return "Invalid date"
    end
    
    
    local year, month, day, hour, minute, seconds, offsetsign, offsethour, offsetmin =json_date:match(pattern)
    local offset = 0
    if offsetsign ~= 'Z' then
      offset = tonumber(offsethour) * 3600 + tonumber(offsetmin)*60
      if offsetsign == "-" then offset = offset * -1 end
    end
    
    --ymd 1-12月のみパーす
	if (tonumber(year) and tonumber(month) and tonumber(day)) then
	 if(tonumber(month) >0 and tonumber(month) <=12)then
	     return preset_fairfield_dateutc(year,month,day) -offset + hour*3600 + minute*60 + seconds
	end
	end
	
    return "Invalid date"
    
    --local temp = os.date("*t",timestamp)
    --if(temp.isdst) then  --パースした時刻がサマーがしらべる
    --offset = offset -3600  --0.5サマータイムもあるので（）、オーストラリアだと使えないかも
    --end
    --return timestamp + get_timezone() -offset
    
    --return timestamp + get_timezone_the_day() -offset
    
    --old method ,avoid crrupt dateme in DST timezone, simply time slide method use OSTIME
    --hourはサマータイム越境時タイムマシンが発生するので最後に足す、幻の2時(2020-03-08T02:00:00) -05:00
    --https://ja.wikipedia.org/wiki/%E5%A4%8F%E6%99%82%E9%96%93　ブラジルが0時豪州3時なので4時までずらす
    --local timestamp = os.time{year = year, month = month, day = day, hour = 4, min = minute, sec = seconds}
    --return timestamp + get_timezone_offset(timestamp) -offset  + (hour-4)*3600
end

--https://claude.ai/chat/80c64364-c40a-400f-be84-3cb3b6382235
--DateUTC by luascript no consider timezone after1970,simple method
function simple_dateutc(year, month, day, hour, min, sec)
    local total_days = 0
    
    for y = 1970, year - 1 do
        local is_leap = (y % 4 == 0 and y % 100 ~= 0) or (y % 400 == 0)
        total_days = total_days + (is_leap and 366 or 365)
    end
    
    local days_in_month = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
    
    if isLeapYear(year) then
        days_in_month[2] = 29
    end
    
    for m = 1, month - 1 do
        total_days = total_days + days_in_month[m]
    end
    
    total_days = total_days + day -1 
    
    local timestamp= total_days * 86400
    
    return timestamp
end

--https://claude.ai/chat/c387c45b-b61c-4b06-8f21-3d74472aa11a
-- フリーゲルの公式
function friegel_days(y, m, d)
    if m < 3 then
        y = y - 1
        m = m + 12
    end
    
    return math.floor(365.25 * y)  -- 年からの日数
        + math.floor(y / 400)      -- 400年ごとのうるう年補正
        - math.floor(y / 100)      -- 100年ごとのうるう年補正
        + math.floor(30.6001 * (m + 1))  -- 月からの日数
        + d - 1
end

-- フェアフィールドの公式
function fairfield_days(y, m, d)
    if m < 3 then
        y = y - 1
        m = m + 12
    end
    
    return math.floor(365.25 * y) 
        + math.floor(y / 400) 
        - math.floor(y / 100)
        + math.floor((153 * m - 457) / 5)  -- 月の計算が異なる
        + d - 1
end

-- ツェラーの公式（曜日計算用だが日数計算にも応用可能）
function zeller_days(y, m, d)
    if m < 3 then
        y = y - 1
        m = m + 12
    end
    
    local c = math.floor(y / 100)
    local k = y % 100
    
    -- 曜日を求める公式（0=土曜日, 1=日曜日, ..., 6=金曜日）
    local w = (d + math.floor((13 * (m + 1)) / 5) + k + math.floor(k / 4) + math.floor(c / 4) - 2 * c) % 7
    
    -- 1970年1月1日からの経過日数に変換する場合は別途計算が必要
    return w  -- これは曜日の値
end

-- 1970年1月1日からの経過日数を計算する関数（フリーゲルの公式使用）
function days_since_epoch(y, m, d)
    return friegel_days(y, m, d) -friegel_days(1970, 1, 1)
end

-- UTCタイムスタンプを取得（秒単位）
function friegel_dateutc(y, m, d)
    return days_since_epoch(y, m, d) * 86400
end

--https://teratail.com/questions/292340でみつけたアルゴの移植 fairfieldのプリセットでの計算
--https://ja.wikipedia.org/wiki/%E3%83%84%E3%82%A7%E3%83%A9%E3%83%BC%E3%81%AE%E5%85%AC%E5%BC%8F
function days(y, m, d)
    -- 月ごとの累積日数テーブル
    local t = { 306, 337, 0, 31, 61, 92, 122, 153, 184, 214, 245, 275 }
    
    m= tonumber(m)
    -- 1,2月の場合は前年として計算
    if(m < 3)then
    y = y - 1
    end
    
    local tm=365*y + math.floor(y/4) - math.floor(y/100) + math.floor(y/400) + t[m] + d
    --debugtxt3= tm .." "..y..m..d
    
    return tm
end

function preset_fairfield_dateutc(y, m, d)
    return (days(y, m, d) - days(1970, 1, 1)) * 86400
end


--https://claude.ai/chat/c387c45b-b61c-4b06-8f21-3d74472aa11a
-- うるう年判定の関数
function isLeapYear(year)
    return year % 4 == 0 and (year % 100 ~= 0 or year % 400 == 0)
end

-- 各月の日数を返す関数
function getDaysInMonth(month, year)
    local days = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
    if month == 2 and isLeapYear(year) then
        return 29
    end
    return days[month]
end


-- 指定された日付がうるう日（2月29日）より後かどうかを判定
function isAfterLeapDay(year, month, day)
    if month > 2 then
        return true
    elseif month== 2 and day >= 29 then
        return true
    end
    return false
end

-- うるう日の通過回数を計算（全期間）
function countLeapDays(year1, month1, day1, year2, month2, day2,after_aniv)
    local count = 0
    
    -- 開始年のうるう日をカウント 開始日以降
    if isLeapYear(year1) and (isAfterLeapDay(year1, month1, day1) == false) then
        count = count + 1
    end
    
    -- 間の年のうるう日をカウント
    for year = year1 + 1, year2 - 1 do
        if isLeapYear(year) then
            count = count + 1
        end
    end
    
    -- 終了年のうるう日をカウント
    if isLeapYear(year2) and isAfterLeapDay(year2, month2, day2) and (after_aniv>=0) then
        count = count + 1
    end
    
    return count
end

-- 年初からの経過日数を計算
function getDaysFromYearStart(year, month, day)
    local days = 0
    for i = 1, month - 1 do
        days = days + getDaysInMonth(i, year)
    end
    return days + day
end

function simple_totaldays(year1, month1, day1,year2, month2, day2)
    local totalDays = 0
    -- 完全な年のうるう年を計算
    for year = year1, year2 - 1 do
        if isLeapYear(year) then
            totalDays = totalDays + 366
        else
            totalDays = totalDays + 365
        end
    end

    -- 最初の年の残りの日数を引く
    totalDays = totalDays - getDaysFromYearStart(year1, month1, day1)

    -- 最後の年の日数を加える
    totalDays = totalDays + getDaysFromYearStart(year2, month2, day2)
    
    return totalDays
end

-- メイン計算処理
function calculateDateDifference(date1, date2)
    -- 日付文字列を年月日に分解
    local year1, month1, day1 = date1:match("(%d+)%-(%d+)%-(%d+)")
    local year2, month2, day2 = date2:match("(%d+)%-(%d+)%-(%d+)")
    
    -- 数値に変換
    year1, month1, day1 = tonumber(year1), tonumber(month1), tonumber(day1)
    year2, month2, day2 = tonumber(year2), tonumber(month2), tonumber(day2)
    
        
    -- 総日数を計算
    --local totalDays = math.floor(elasped(date1)/86400)
    --local totalDays = simple_totaldays(year1, month1, day1,year2, month2, day2)
    local totalDays = -((days(year1, month1, day1) - days(year2, month2, day2)))
    
    
    --今年の周年より早いか遅いか
    local after_aniv = elasped(debugtxt3);
    local monthadjust=0
    if(after_aniv >=0) then
    monthadjust= 0
    elseif(month1 == month2) then
    monthadjust= -1
    end
    local leapDays=countLeapDays(year1, month1, day1, year2, month2, day2,after_aniv)
    
    --simple_dateutc(2024,11,22,0,0,0)
    
    -- 年数を計算
    local monthdiff= (year2-year1)*12 + month2-month1  + monthadjust
    local completeYears =  math.floor(monthdiff/12)  --math.floor((totalDays-leapDays) / 12)
    -- 残りの日数を計算
    local remainingDays = totalDays - (completeYears * 365) -leapDays
    
    
    return totalDays.."日".."("..completeYears.."年閏"..leapDays.."日,"..remainingDays.."日)"
end

function get_anniversary_day(tt)
  local theyear=string.format("%04d",tonumber(os.date("!%Y",os.time()+9*3600)))
  local mmdd = string.format("%02d",tonumber(os.date('!%m',tt))).."-"..string.format("%02d",tonumber(os.date('!%d',tt)))
  if(mmdd =="02-29")then
  if(isLeapYear(theyear)==false)then
     mmdd="02-28"
  end 
  end 
  
  return theyear .. "-".. mmdd .."T"..string.format("%02d",tonumber(os.date('!%H',tt))) ..":00:00+09:00"
end

function isDST(J)
	local localdate = os.date("*t")
	local st=""
	if(localdate.isdst) then
		st="DST"
		if(J=="J")then
		st="夏時間"
		end
	end
	return st
end

function isempty(s)
  return s == nil or s == '' or  s == '--'
end

function JPday(date,t)
  
  local dt = os.date("*t",t)
  if (get_timezone_the_day() == 9*3600) then --動作は日本時間のときだけ
  	date= string.gsub(date, "%%Vr",(dt.year-2018))  --R%Vr/%Y/%m/%d(%Vw)%X
  	date= string.gsub(date, "%%Vh",(dt.year-1988))  --H%Vr/%Y/%m/%d(%Vw)%X
  	date= string.gsub(date, "%%Vs",(dt.year-1925))  --S%Vr/%Y/%m/%d(%Vw)%X
  	date= string.gsub(date, "%%Vt",(dt.year-1911))  --T%Vr/%Y/%m/%d(%Vw)%X
  end
  
  --DateUTC(2020,2,31,20,48,0,0)
  local jp_day={"日","月","火","水","木","金","土"} --%w用
  date= string.gsub(date, "%%EM",daystring)  ----フリーズ文字代替
  date= string.gsub(date, "%%E",debugtxt1)  ----フリーズ文字代替
  date= string.gsub(date, "%%J",debugtxt2)  ----フリーズ文字代替
  date= string.gsub(date, "%%K",debugtxt3)  ----フリーズ文字代替
  date= string.gsub(date, "%%s",os.time())  ----フリーズ文字代替
  date= string.gsub(date, "%%DST",isDST("J"))
  date= string.gsub(date, "%%Vw",jp_day[tonumber(os.date("%w",t))+1])
  date= string.gsub(date, "%%ZZ", get_tzoffset_sepa(get_timezone())) --timezone タイムゾーン時差情報標準時、サマータイムなし 
  date= string.gsub(date, "%%Z",  get_tzoffset(get_timezone())) --timezone タイムゾーン時差情報標準時、サマータイムなし 
  date= string.gsub(date, "%%zz", get_tzoffset_sepa(get_timezone_the_day())) --timezone タイムゾーン時差情報夏時間こみ

  date= string.gsub(date, "%%V%w","")  ----令和しょりなし
  
 return date
end

function get_ep(tu)	
	
	if(tu<0)then
	tu=-tu
	end
	
   local total = tu*10

	--local tenths   = math.floor(total % 10)
	local seconds  = math.floor((total / 10) % 60)
	local minutes  = math.floor((total / 600) % 60)
	local hours    = math.floor((total / 36000) % 24)
	local idays     = math.floor(total / 864000)
	local days     = math.floor(idays%365)
	local years    = math.floor(total/(864000*365))

	--local hours_infinite  = math.floor(total / 36000)
	--local seconds_infinite  = math.floor(total / 10)
	--local minutes_infinite  = math.floor(total / 600)
	local yearst    = years.."年"
	if(years==0)then
	yearst =""
	end
	
	
	
   local ep = yearst..days.."日".. hours.."時".. minutes.."分"..seconds .."秒"
   
   return ep
end




function parse_jp_era(date)
  local datestring=""
  
  date= string.gsub(date, "%%[LNOPQfkloqv]","")	--フリーズ文字 %%[EJKLNOPQfikloqsv]
  
  local t = os.time()
  
   --if(os.date("!%H%M",t)=="1500")then --0時のとき切り替え
  if(daychange ~= JSTday())then
  findday()
  end
  
  --test_parser()
  
  if (string.find(date,"%%i")) then
  
  
   local inum = (ima)%(#imas+1)    --imas[1] AC,dre 18 ,miri 22
   if(inum==0)then
   inum =1
   end
   local tu = elasped(imas[inum][2])
   local imasname =imas[inum][1]
   
  	if(isempty(imm)==false) then
  	imasname =imasnaem .."("..imas[inum][3]..")"
  	end
   local gm = "開始から"  
    if(tu<0) then
    gm="開始まで" 
	end
  
	local dateu='!%m%d'       --(%a)%X(UTC+09:00)'
	local nst =os.date(dateu,os.time()+9*3600)
	local tt = parse_json_date_utc(imas[inum][2])+9*3600
	local ist =os.date(dateu,tt)
	local nenme =""
	if(nst==ist)then
	local years = math.floor(tu*10/(864000*365))
	nenme = ","..years.."周年"
	end
	local ep=get_ep(tu)
    local date1=ISOtoJST(imas[inum][2])
    local date2=os.date("!%Y-%m-%dT%H:%M:%S+09:00",os.time()+9*3600)
  	
  	
	local dt = get_anniversary_day(tt)
	debugtxt3=dt
  
  
    local eps = calculateDateDifference(date1,date2)
  	date =string.gsub(date, "%%is",gm..eps..nenme)
    
  local gm = "周年" 
  local aniv=lefttime(dt)
  if(aniv<0) then
  aniv =-aniv
  gm = gm.."から"
  else
  gm = gm.."まで"
  end
  local ep= string.gsub(get_ep(aniv),"0年","")
  	date =string.gsub(date, "%%it",gm..ep)
  	
  local idn=imasb[imassel[imass]][useidol][2]
  local dt=imasb[imassel[imass]][useidol][1]
  if(dt=="" or dt == nil or dt =="--")then
  	date =string.gsub(date, "%%in",idn)
  	date =string.gsub(date, "%%ib","稼働日は不明です")
  	date =string.gsub(date, "%%ic","")
  	date =string.gsub(date, "%%ia","")
  	date =string.gsub(date, "%%il","")
  else
  tt = parse_json_date_utc(dt)+9*3600
  local aniv=lefttime(dt)
  local bs = get_anniversary_day(tt)
  local gm = "稼働日" 
  if(aniv<0) then
  aniv =-aniv
  gm = gm.."から"
  else
  gm = gm.."まで"
  end
  
  local anivb=lefttime(bs)
  local gmm = "周年" 
  if(anivb<0) then
  anivb =-anivb
  gmm = gmm.."から"
  else
  gmm = gmm.."まで"
  end
  local date1=ISOtoJST(imasb[imassel[imass]][useidol][1])
  local date2=os.date("!%Y-%m-%dT%H:%M:%S+09:00",os.time()+9*3600)
  local eps=calculateDateDifference(date1,date2)
  local ep= string.gsub(get_ep(anivb),"0年","")
  	date =string.gsub(date, "%%in",idn)
  	date =string.gsub(date, "%%ib",JST(dt))
  	date =string.gsub(date, "%%ic",gm..eps)
  	date =string.gsub(date, "%%ia",JST(bs))
  	date =string.gsub(date, "%%il",gmm..ep)
  end
  	
  	local imm=imas[inum][4]
  	debugtxt2=JST(imas[inum][2])  --開始日
  	debugtxt1= "" --os.date("!%Y-%m-%dT%H:%M:%S+00:00", parse_json_date_utc("24 Nov 2024 22:54 UT"))
  	--test_parser()
  	
  	
  	if(isempty(imm)==false) then
  	debugtxt1= JST(imm) --差終わり日
    tu= elasped(imas[inum][4])
  	
   local ep=get_ep(tu)
    local date1=imas[inum][4]
    local date2=os.date("!%Y-%m-%dT%H:%M:%S+09:00",os.time()+9*3600)
    local eps = calculateDateDifference(date1,date2)
  	date =string.gsub(date, "%%ie","サ終から"..eps)
  	--date =string.gsub(date, "%%ie","サ終から"..ep )
  	end
  	
  	date =string.gsub(date, "%%ie","")
  	date =string.gsub(date, "%%i",imasname)
  end
  
  
  if (string.find(date,"%%UTC")) then
  local tu = os.time()  + (tonumber(utc)*3600)
  
  local u= get_tzoffset_sepa(utc*3600)
    local dateu='!%Y/%m/%d(%a)%X(UTC'..u..')' --%z系はOS依存のため使用不可
   
    --local jp_day={"日","月","火","水","木","金","土",} --dt.wday用
    --local dt = os.date("!*t",tu) --%Vwを使いたいとき utcの時間で曜日を取得する必要がある
	--dateu= string.gsub(dateu, "%%Vw",jp_day[dt.wday])
	
	--%w用
    --local getd = os.date("!%w",tu) --%Vwを使いたいとき utcの時間で曜日を取得する必要がある
	--dateu= string.gsub(dateu, "%%Vw",jp_day[tonumber(getd)+1])
	
  	dateu=JPday(dateu,tu)
  	datestring = os.date(dateu,tu)
  	date =string.gsub(date, "%%UTC",datestring)
  end
  if (string.find(date,"%%JST")) then
  local dateu='!%Y/%m/%dT%X(GMT+9:00,JST,日本時間) %a' --%z系はOS依存のため使用不可
  
  	datestring = os.date(dateu, t+9*3600)
  	date =string.gsub(date, "%%JST",datestring)
  end
  if (string.find(date,"%%ISOZ")) then
  local dateu='!%Y/%m/%dT%XZ %a'    --%z系はOS依存のため使用不可
  

  	datestring = os.date(dateu, t)
  	date =string.gsub(date, "%%ISO%w",datestring)
  end
  if (string.find(date,"%%ISO")) then
    local dateu='%Y/%m/%dT%X%zz %a' 
    
  	--dateu=JPday(dateu,t)
  	
  	datestring = os.date(dateu, t)
  	date =string.gsub(date, "%%ISO",datestring)
  end
  
  date=JPday(date,t)

  return os.date(date)
end

function set_time_text()
	local text = parse_jp_era(format_string)  --os.date(format_string)
		  --text = tostring(get_timezone()/3600) 
		  --text = tostring(get_timezone()%60)
		  --text = os.time()  					--2020-02-18 21:27:05 utc0  ostime+13,off+9でJST
		  --text = os.time()+ get_timezone()  	--2020-02-19 10:48:47 utc0
		  --text = os.time(os.date("!*t", now)) --2020-02-18 08:27:59 utc0 
		  --text = os.time{year = 2020, month = 2, day = 25, hour = 21}        --2020-02-25 08:00:00 utc0
		  --text = os.time{year = 2020, month = 2, day = 25, hour = 21} -3600*9  --2020-02-24 22:00:00 utc0
		  --text = os.time{year = 2020, month = 2, day = 25, hour = 21}+ get_timezone() --2020-02-25 21:00:00 utc0
		  --text = os.time{year = 2020, month = 2, day = 25, hour = 21}+ get_timezone()-3600*9  --2020-02-25 12:00:00 utc0
		 
		
	if text ~= last_text then
		local source = obs.obs_get_source_by_name(source_name)
		if source ~= nil then
			local settings = obs.obs_data_create()
			obs.obs_data_set_string(settings, "text", text)
			obs.obs_source_update(source, settings)
			obs.obs_data_release(settings)
			obs.obs_source_release(source)
		end
	end
	
	last_text = text
end

function timer_callback()
	set_time_text()
end

function activate(activating)
	if activated == activating then
		return
	end

	activated = activating

	if activating then
		set_time_text()
		obs.timer_add(timer_callback, 1000)
	else
		obs.timer_remove(timer_callback)
	end
end

-- Called when a source is activated/deactivated
function activate_signal(cd, activating)
	local source = obs.calldata_source(cd, "source")
	if source ~= nil then
		local name = obs.obs_source_get_name(source)
		if (name == source_name) then
			activate(activating)
		end
	end
end

function source_activated(cd)
	activate_signal(cd, true)
end

function source_deactivated(cd)
	activate_signal(cd, false)
end

function reset(pressed)
	if not pressed then
		return
	end

	activate(false)
	local source = obs.obs_get_source_by_name(source_name)
	if source ~= nil then
		local active = obs.obs_source_active(source)
		obs.obs_source_release(source)
		activate(active)
	end
end

----------------------------------------------------------

-- A function named script_properties defines the properties that the user
-- can change for the entire script module itself
function script_properties()
	local props = obs.obs_properties_create()

	local p = obs.obs_properties_add_list(props, "source", "Text Source", obs.OBS_COMBO_TYPE_EDITABLE, obs.OBS_COMBO_FORMAT_STRING)
	local sources = obs.obs_enum_sources()
	if sources ~= nil then
		for _, source in ipairs(sources) do
			source_id = obs.obs_source_get_unversioned_id(source)
			if source_id == "text_gdiplus" or source_id == "text_ft2_source" then
				local name = obs.obs_source_get_name(source)
				obs.obs_property_list_add_string(p, name, name)
			end
		end
	end
	obs.source_list_release(sources)

	obs.obs_properties_add_text(props, "format_string", "Format String", obs.OBS_TEXT_MULTILINE)
	obs.obs_properties_add_float(props, "UTC", "WorldTime UTC-14～+14(%UTC)", -14, 14, 1)
	local ac = obs.obs_properties_add_list(props, "im", "みくさんげーむ発売日/誕生日検索", obs.OBS_COMBO_TYPE_EDITABLE, obs.OBS_COMBO_FORMAT_STRING)
		for _, img in ipairs(imas) do		 
  	    if(isempty(img[2])==false) then
		obs.obs_property_list_add_string(ac, img[1],  img[1])
		end
		end
	obs.obs_properties_add_int(props, "IMSERIES", "発売日/誕生日個別検索", 1, 5, 1)
	for i=1,#imassel do
	local dre = obs.obs_properties_add_list(props,  imassel[i], i.."."..imasname[i], obs.OBS_COMBO_TYPE_EDITABLE, obs.OBS_COMBO_FORMAT_STRING)
		for _, img in ipairs(imasb[imassel[i]]) do
		obs.obs_property_list_add_string(dre, img[2],  img[2])
		end
	end
	obs.obs_properties_add_int(props, "DAYLIM", "稼働日何日以内 %EM", 0, 30, 1)
	return props
end

-- A function named script_description returns the description shown to
-- the user
function script_description()
	return "Sets a text source to act as a date/time text when the source is active.\n\nMade by Ragowit"
end

function findidol(sel,s)


if(sel=="AC")then
local st=imas
local stlen=tonumber(#st)
for i=1,stlen do
if(imas[i][1] == s)then
return i
end
if(string.find(imas[i][1],s) ~= nil)then
return i
end
end
return 1
end

local st=imasb[sel]
local stlen=tonumber(#st)
for _, img in ipairs(imassel) do
if(sel==img)then
	for i=1,stlen do
		if((imasb[img][i][2]..imasb[img][i][3]):match(s))then
		return i
		end
	end
end
end
	return 1
end

function MMDD(dt)
return os.date("!%m/%d",parse_json_date_utc(dt)+9*3600)
end

function YYYY(dt)
return os.date("!%Y",parse_json_date_utc(dt)+9*3600)
end

function findday()
daystring =""
local birthst={}
local daycalc=tonumber(daylim)
local stlen=tonumber(#imas)
local theyear=os.date("!%Y",os.time()+9*3600)
local theyearn=theyear*1+1

--debugtxt1=string.gsub(imas[15][2], "^(%d+)",theyear)

for i=1,stlen do
local birth=imas[i][2]
if(birth:match("([Z%+])(%d?%d?):?(%d?%d?)$")) then
local tmp=string.gsub(imas[i][2], "^(%d+)",theyear)
local tmp2=string.gsub(imas[i][2], "^(%d+)",theyearn)
local t=lefttime(tmp)
local tt=lefttime(tmp2)
local name=imas[i][1] .."("..imas[i][3]..")"

name = name:gsub("%(%)", "")
local namen=imas[i][1] ..imas[i][2]
t=math.ceil(t/3600/24);
tt=math.ceil(tt/3600/24);
if((t>=0 and t<=daycalc) or (tt>=0 and tt<=daycalc))then
tmp =MMDD(birth).." あと".. math.abs(t).."日"
if(t<0)then
tmp =MMDD(birth).." あと".. math.abs(tt).."日"
end
tmp = tmp .. name.." -"..YYYY(birth).."\r\n"
birthst[namen]=tmp
end
end
end


local tkeys = {}
-- populate the table that holds the keys
for k in pairs(birthst) do
tmp =string.match( birthst[k], "あと%d+")
tmp = string.gsub(tmp, "あと","")
table.insert(tkeys, { birthst[k],tonumber(tmp)})

end
-- sort the keys
--table.sort(tkeys)
table.sort(tkeys,
	function(a,b)
		return (a[2] < b[2])
	end)

for i=1,#tkeys do
   daystring=daystring .. tkeys[i][1]
end

daychange =  JSTday()
	return 1
end

function table.to_qs(arg)
	local qs = {}
	for key, value in pairs(arg) do
		table.insert(qs, key .. "=" .. tostring(value):urlencode())
	end
	return "?" .. table.concat(qs, "&")
end

function trim(s)
    return (s:gsub("^%s*(.-)%s*$", "%1"))
end

function cut_string(s,max)
if(#s>=max)then
s = s:sub(1,max)
end

return trim(s)
end

-- A function named script_update will be called when settings are changed
function script_update(settings)
	activate(false)

	source_name = obs.obs_data_get_string(settings, "source")
	format_string = cut_string(obs.obs_data_get_string(settings, "format_string"),100)
	utc           = obs.obs_data_get_double(settings, "UTC")
	ima           =   findidol("AC",obs.obs_data_get_string(settings, "im"))
	imass           = obs.obs_data_get_int(settings, "IMSERIES")
	daylim           = obs.obs_data_get_int(settings, "DAYLIM")
	cgn =findidol("cg",cut_string(obs.obs_data_get_string(settings, "cg"),20))
	mln =findidol("ml",cut_string(obs.obs_data_get_string(settings, "ml"),20))
	smn =findidol("sm",cut_string(obs.obs_data_get_string(settings, "sm"),20))
	scn =findidol("sc",cut_string(obs.obs_data_get_string(settings, "sc"),20))
	dsn =findidol("ds",cut_string(obs.obs_data_get_string(settings, "ds"),20))
	local inum={cgn,mln,smn,scn,dsn}
	useidol=inum[imass]
	findday()
	
	reset(true)
end

-- A function named script_defaults will be called to set the default settings
function script_defaults(settings)
	obs.obs_data_set_default_string(settings, "format_string", "%Y/%m/%d(%Jw)%X(UTC%z)") --"%Y-%m-%d %X")
	obs.obs_data_set_default_double(settings, "UTC", 9)
	obs.obs_data_set_default_string(settings, "im","初音ミク -Project DIVA-")
	obs.obs_data_set_default_int(settings, "IMSERIES", 1)
	obs.obs_data_set_default_string(settings, "cg","初音ミク -Project DIVA-")
	obs.obs_data_set_default_string(settings, "ml","日野森志歩")
	obs.obs_data_set_default_string(settings, "sm","LEON")
	obs.obs_data_set_default_string(settings, "sc","ミクオの日")
	obs.obs_data_set_default_string(settings, "ds","ALL")
	obs.obs_data_set_default_int(settings, "DAYLIM", 2)
end

-- a function named script_load will be called on startup
function script_load(settings)
	-- Connect activation/deactivation signal callbacks
	--
	-- NOTE: These particular script callbacks do not necessarily have to
	-- be disconnected, as callbacks will automatically destroy themselves
	-- if the script is unloaded.  So there's no real need to manually
	-- disconnect callbacks that are intended to last until the script is
	-- unloaded.
	local sh = obs.obs_get_signal_handler()
	obs.signal_handler_connect(sh, "source_activate", source_activated)
	obs.signal_handler_connect(sh, "source_deactivate", source_deactivated)
end



--JSONparser


local json = { _version = "0.1.2" }

-------------------------------------------------------------------------------
-- Encode
-------------------------------------------------------------------------------

local encode

local escape_char_map = {
  [ "\\" ] = "\\",
  [ "\"" ] = "\"",
  [ "\b" ] = "b",
  [ "\f" ] = "f",
  [ "\n" ] = "n",
  [ "\r" ] = "r",
  [ "\t" ] = "t",
}

local escape_char_map_inv = { [ "/" ] = "/" }
for k, v in pairs(escape_char_map) do
  escape_char_map_inv[v] = k
end


local function escape_char(c)
  return "\\" .. (escape_char_map[c] or string.format("u%04x", c:byte()))
end


local function encode_nil(val)
  return "null"
end


local function encode_table(val, stack)
  local res = {}
  stack = stack or {}

  -- Circular reference?
  if stack[val] then error("circular reference") end

  stack[val] = true

  if rawget(val, 1) ~= nil or next(val) == nil then
    -- Treat as array -- check keys are valid and it is not sparse
    local n = 0
    for k in pairs(val) do
      if type(k) ~= "number" then
        error("invalid table: mixed or invalid key types")
      end
      n = n + 1
    end
    if n ~= #val then
      error("invalid table: sparse array")
    end
    -- Encode
    for i, v in ipairs(val) do
      table.insert(res, encode(v, stack))
    end
    stack[val] = nil
    return "[" .. table.concat(res, ",") .. "]"

  else
    -- Treat as an object
    for k, v in pairs(val) do
      if type(k) ~= "string" then
        error("invalid table: mixed or invalid key types")
      end
      table.insert(res, encode(k, stack) .. ":" .. encode(v, stack))
    end
    stack[val] = nil
    return "{" .. table.concat(res, ",") .. "}"
  end
end


local function encode_string(val)
  return '"' .. val:gsub('[%z\1-\31\\"]', escape_char) .. '"'
end


local function encode_number(val)
  -- Check for NaN, -inf and inf
  if val ~= val or val <= -math.huge or val >= math.huge then
    error("unexpected number value '" .. tostring(val) .. "'")
  end
  return string.format("%.14g", val)
end


local type_func_map = {
  [ "nil"     ] = encode_nil,
  [ "table"   ] = encode_table,
  [ "string"  ] = encode_string,
  [ "number"  ] = encode_number,
  [ "boolean" ] = tostring,
}


encode = function(val, stack)
  local t = type(val)
  local f = type_func_map[t]
  if f then
    return f(val, stack)
  end
  error("unexpected type '" .. t .. "'")
end


function json.encode(val)
  return ( encode(val) )
end


-------------------------------------------------------------------------------
-- Decode
-------------------------------------------------------------------------------

local parse

local function create_set(...)
  local res = {}
  for i = 1, select("#", ...) do
    res[ select(i, ...) ] = true
  end
  return res
end

local space_chars   = create_set(" ", "\t", "\r", "\n")
local delim_chars   = create_set(" ", "\t", "\r", "\n", "]", "}", ",")
local escape_chars  = create_set("\\", "/", '"', "b", "f", "n", "r", "t", "u")
local literals      = create_set("true", "false", "null")

local literal_map = {
  [ "true"  ] = true,
  [ "false" ] = false,
  [ "null"  ] = nil,
}


local function next_char(str, idx, set, negate)
  for i = idx, #str do
    if set[str:sub(i, i)] ~= negate then
      return i
    end
  end
  return #str + 1
end


local function decode_error(str, idx, msg)
  local line_count = 1
  local col_count = 1
  for i = 1, idx - 1 do
    col_count = col_count + 1
    if str:sub(i, i) == "\n" then
      line_count = line_count + 1
      col_count = 1
    end
  end
  error( string.format("%s at line %d col %d", msg, line_count, col_count) )
end


local function codepoint_to_utf8(n)
  -- http://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&id=iws-appendixa
  local f = math.floor
  if n <= 0x7f then
    return string.char(n)
  elseif n <= 0x7ff then
    return string.char(f(n / 64) + 192, n % 64 + 128)
  elseif n <= 0xffff then
    return string.char(f(n / 4096) + 224, f(n % 4096 / 64) + 128, n % 64 + 128)
  elseif n <= 0x10ffff then
    return string.char(f(n / 262144) + 240, f(n % 262144 / 4096) + 128,
                       f(n % 4096 / 64) + 128, n % 64 + 128)
  end
  error( string.format("invalid unicode codepoint '%x'", n) )
end


local function parse_unicode_escape(s)
  local n1 = tonumber( s:sub(1, 4),  16 )
  local n2 = tonumber( s:sub(7, 10), 16 )
   -- Surrogate pair?
  if n2 then
    return codepoint_to_utf8((n1 - 0xd800) * 0x400 + (n2 - 0xdc00) + 0x10000)
  else
    return codepoint_to_utf8(n1)
  end
end


local function parse_string(str, i)
  local res = ""
  local j = i + 1
  local k = j

  while j <= #str do
    local x = str:byte(j)

    if x < 32 then
      decode_error(str, j, "control character in string")

    elseif x == 92 then -- `\`: Escape
      res = res .. str:sub(k, j - 1)
      j = j + 1
      local c = str:sub(j, j)
      if c == "u" then
        local hex = str:match("^[dD][89aAbB]%x%x\\u%x%x%x%x", j + 1)
                 or str:match("^%x%x%x%x", j + 1)
                 or decode_error(str, j - 1, "invalid unicode escape in string")
        res = res .. parse_unicode_escape(hex)
        j = j + #hex
      else
        if not escape_chars[c] then
          decode_error(str, j - 1, "invalid escape char '" .. c .. "' in string")
        end
        res = res .. escape_char_map_inv[c]
      end
      k = j + 1

    elseif x == 34 then -- `"`: End of string
      res = res .. str:sub(k, j - 1)
      return res, j + 1
    end

    j = j + 1
  end

  decode_error(str, i, "expected closing quote for string")
end


local function parse_number(str, i)
  local x = next_char(str, i, delim_chars)
  local s = str:sub(i, x - 1)
  local n = tonumber(s)
  if not n then
    decode_error(str, i, "invalid number '" .. s .. "'")
  end
  return n, x
end


local function parse_literal(str, i)
  local x = next_char(str, i, delim_chars)
  local word = str:sub(i, x - 1)
  if not literals[word] then
    decode_error(str, i, "invalid literal '" .. word .. "'")
  end
  return literal_map[word], x
end


local function parse_array(str, i)
  local res = {}
  local n = 1
  i = i + 1
  while 1 do
    local x
    i = next_char(str, i, space_chars, true)
    -- Empty / end of array?
    if str:sub(i, i) == "]" then
      i = i + 1
      break
    end
    -- Read token
    x, i = parse(str, i)
    res[n] = x
    n = n + 1
    -- Next token
    i = next_char(str, i, space_chars, true)
    local chr = str:sub(i, i)
    i = i + 1
    if chr == "]" then break end
    if chr ~= "," then decode_error(str, i, "expected ']' or ','") end
  end
  return res, i
end


local function parse_object(str, i)
  local res = {}
  i = i + 1
  while 1 do
    local key, val
    i = next_char(str, i, space_chars, true)
    -- Empty / end of object?
    if str:sub(i, i) == "}" then
      i = i + 1
      break
    end
    -- Read key
    if str:sub(i, i) ~= '"' then
      decode_error(str, i, "expected string for key")
    end
    key, i = parse(str, i)
    -- Read ':' delimiter
    i = next_char(str, i, space_chars, true)
    if str:sub(i, i) ~= ":" then
      decode_error(str, i, "expected ':' after key")
    end
    i = next_char(str, i + 1, space_chars, true)
    -- Read value
    val, i = parse(str, i)
    -- Set
    res[key] = val
    -- Next token
    i = next_char(str, i, space_chars, true)
    local chr = str:sub(i, i)
    i = i + 1
    if chr == "}" then break end
    if chr ~= "," then decode_error(str, i, "expected '}' or ','") end
  end
  return res, i
end


local char_func_map = {
  [ '"' ] = parse_string,
  [ "0" ] = parse_number,
  [ "1" ] = parse_number,
  [ "2" ] = parse_number,
  [ "3" ] = parse_number,
  [ "4" ] = parse_number,
  [ "5" ] = parse_number,
  [ "6" ] = parse_number,
  [ "7" ] = parse_number,
  [ "8" ] = parse_number,
  [ "9" ] = parse_number,
  [ "-" ] = parse_number,
  [ "t" ] = parse_literal,
  [ "f" ] = parse_literal,
  [ "n" ] = parse_literal,
  [ "[" ] = parse_array,
  [ "{" ] = parse_object,
}


parse = function(str, idx)
  local chr = str:sub(idx, idx)
  local f = char_func_map[chr]
  if f then
    return f(str, idx)
  end
  decode_error(str, idx, "unexpected character '" .. chr .. "'")
end


function json.decode(str)
  if type(str) ~= "string" then
    error("expected argument of type string, got " .. type(str))
  end
  local res, idx = parse(str, next_char(str, 1, space_chars, true))
  idx = next_char(str, idx, space_chars, true)
  if idx <= #str then
    decode_error(str, idx, "trailing garbage")
  end
  return res
end


--return json
imasb=json.decode(imasb)